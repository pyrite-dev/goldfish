/**
 * @if SHOW_LICENSE
 **********************************************************************************
 * 
 * Copyright (c) 2025 Pyrite Development Team. All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without modification
 * are permitted provided that the following conditions are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer. 
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution. 
 * 
 * 3. All advertising materials mentioning features or use of this software must
 *    display the following acknowledgement: 
 *    This product includes software developed by the Pyrite Development Team. 
 * 
 * 4. Neither the name of Pyrite Development Team nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDER "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL COPYRIGHT HOLDER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 **********************************************************************************
 * @endif
 */

/**
 * OpenGL loader generated by gload.
 *
 * Versions:
 *   OpenGL 1.0
 *   OpenGL 1.1
 *
 * Commands:
 *   glCullFace
 *   glFrontFace
 *   glHint
 *   glLineWidth
 *   glPointSize
 *   glPolygonMode
 *   glScissor
 *   glTexParameterf
 *   glTexParameterfv
 *   glTexParameteri
 *   glTexParameteriv
 *   glTexImage1D
 *   glTexImage2D
 *   glDrawBuffer
 *   glClear
 *   glClearColor
 *   glClearStencil
 *   glClearDepth
 *   glStencilMask
 *   glColorMask
 *   glDepthMask
 *   glDisable
 *   glEnable
 *   glFinish
 *   glFlush
 *   glBlendFunc
 *   glLogicOp
 *   glStencilFunc
 *   glStencilOp
 *   glDepthFunc
 *   glPixelStoref
 *   glPixelStorei
 *   glReadBuffer
 *   glReadPixels
 *   glGetBooleanv
 *   glGetDoublev
 *   glGetError
 *   glGetFloatv
 *   glGetIntegerv
 *   glGetString
 *   glGetTexImage
 *   glGetTexParameterfv
 *   glGetTexParameteriv
 *   glGetTexLevelParameterfv
 *   glGetTexLevelParameteriv
 *   glIsEnabled
 *   glDepthRange
 *   glViewport
 *   glNewList
 *   glEndList
 *   glCallList
 *   glCallLists
 *   glDeleteLists
 *   glGenLists
 *   glListBase
 *   glBegin
 *   glBitmap
 *   glColor3b
 *   glColor3bv
 *   glColor3d
 *   glColor3dv
 *   glColor3f
 *   glColor3fv
 *   glColor3i
 *   glColor3iv
 *   glColor3s
 *   glColor3sv
 *   glColor3ub
 *   glColor3ubv
 *   glColor3ui
 *   glColor3uiv
 *   glColor3us
 *   glColor3usv
 *   glColor4b
 *   glColor4bv
 *   glColor4d
 *   glColor4dv
 *   glColor4f
 *   glColor4fv
 *   glColor4i
 *   glColor4iv
 *   glColor4s
 *   glColor4sv
 *   glColor4ub
 *   glColor4ubv
 *   glColor4ui
 *   glColor4uiv
 *   glColor4us
 *   glColor4usv
 *   glEdgeFlag
 *   glEdgeFlagv
 *   glEnd
 *   glIndexd
 *   glIndexdv
 *   glIndexf
 *   glIndexfv
 *   glIndexi
 *   glIndexiv
 *   glIndexs
 *   glIndexsv
 *   glNormal3b
 *   glNormal3bv
 *   glNormal3d
 *   glNormal3dv
 *   glNormal3f
 *   glNormal3fv
 *   glNormal3i
 *   glNormal3iv
 *   glNormal3s
 *   glNormal3sv
 *   glRasterPos2d
 *   glRasterPos2dv
 *   glRasterPos2f
 *   glRasterPos2fv
 *   glRasterPos2i
 *   glRasterPos2iv
 *   glRasterPos2s
 *   glRasterPos2sv
 *   glRasterPos3d
 *   glRasterPos3dv
 *   glRasterPos3f
 *   glRasterPos3fv
 *   glRasterPos3i
 *   glRasterPos3iv
 *   glRasterPos3s
 *   glRasterPos3sv
 *   glRasterPos4d
 *   glRasterPos4dv
 *   glRasterPos4f
 *   glRasterPos4fv
 *   glRasterPos4i
 *   glRasterPos4iv
 *   glRasterPos4s
 *   glRasterPos4sv
 *   glRectd
 *   glRectdv
 *   glRectf
 *   glRectfv
 *   glRecti
 *   glRectiv
 *   glRects
 *   glRectsv
 *   glTexCoord1d
 *   glTexCoord1dv
 *   glTexCoord1f
 *   glTexCoord1fv
 *   glTexCoord1i
 *   glTexCoord1iv
 *   glTexCoord1s
 *   glTexCoord1sv
 *   glTexCoord2d
 *   glTexCoord2dv
 *   glTexCoord2f
 *   glTexCoord2fv
 *   glTexCoord2i
 *   glTexCoord2iv
 *   glTexCoord2s
 *   glTexCoord2sv
 *   glTexCoord3d
 *   glTexCoord3dv
 *   glTexCoord3f
 *   glTexCoord3fv
 *   glTexCoord3i
 *   glTexCoord3iv
 *   glTexCoord3s
 *   glTexCoord3sv
 *   glTexCoord4d
 *   glTexCoord4dv
 *   glTexCoord4f
 *   glTexCoord4fv
 *   glTexCoord4i
 *   glTexCoord4iv
 *   glTexCoord4s
 *   glTexCoord4sv
 *   glVertex2d
 *   glVertex2dv
 *   glVertex2f
 *   glVertex2fv
 *   glVertex2i
 *   glVertex2iv
 *   glVertex2s
 *   glVertex2sv
 *   glVertex3d
 *   glVertex3dv
 *   glVertex3f
 *   glVertex3fv
 *   glVertex3i
 *   glVertex3iv
 *   glVertex3s
 *   glVertex3sv
 *   glVertex4d
 *   glVertex4dv
 *   glVertex4f
 *   glVertex4fv
 *   glVertex4i
 *   glVertex4iv
 *   glVertex4s
 *   glVertex4sv
 *   glClipPlane
 *   glColorMaterial
 *   glFogf
 *   glFogfv
 *   glFogi
 *   glFogiv
 *   glLightf
 *   glLightfv
 *   glLighti
 *   glLightiv
 *   glLightModelf
 *   glLightModelfv
 *   glLightModeli
 *   glLightModeliv
 *   glLineStipple
 *   glMaterialf
 *   glMaterialfv
 *   glMateriali
 *   glMaterialiv
 *   glPolygonStipple
 *   glShadeModel
 *   glTexEnvf
 *   glTexEnvfv
 *   glTexEnvi
 *   glTexEnviv
 *   glTexGend
 *   glTexGendv
 *   glTexGenf
 *   glTexGenfv
 *   glTexGeni
 *   glTexGeniv
 *   glFeedbackBuffer
 *   glSelectBuffer
 *   glRenderMode
 *   glInitNames
 *   glLoadName
 *   glPassThrough
 *   glPopName
 *   glPushName
 *   glClearAccum
 *   glClearIndex
 *   glIndexMask
 *   glAccum
 *   glPopAttrib
 *   glPushAttrib
 *   glMap1d
 *   glMap1f
 *   glMap2d
 *   glMap2f
 *   glMapGrid1d
 *   glMapGrid1f
 *   glMapGrid2d
 *   glMapGrid2f
 *   glEvalCoord1d
 *   glEvalCoord1dv
 *   glEvalCoord1f
 *   glEvalCoord1fv
 *   glEvalCoord2d
 *   glEvalCoord2dv
 *   glEvalCoord2f
 *   glEvalCoord2fv
 *   glEvalMesh1
 *   glEvalPoint1
 *   glEvalMesh2
 *   glEvalPoint2
 *   glAlphaFunc
 *   glPixelZoom
 *   glPixelTransferf
 *   glPixelTransferi
 *   glPixelMapfv
 *   glPixelMapuiv
 *   glPixelMapusv
 *   glCopyPixels
 *   glDrawPixels
 *   glGetClipPlane
 *   glGetLightfv
 *   glGetLightiv
 *   glGetMapdv
 *   glGetMapfv
 *   glGetMapiv
 *   glGetMaterialfv
 *   glGetMaterialiv
 *   glGetPixelMapfv
 *   glGetPixelMapuiv
 *   glGetPixelMapusv
 *   glGetPolygonStipple
 *   glGetTexEnvfv
 *   glGetTexEnviv
 *   glGetTexGendv
 *   glGetTexGenfv
 *   glGetTexGeniv
 *   glIsList
 *   glFrustum
 *   glLoadIdentity
 *   glLoadMatrixf
 *   glLoadMatrixd
 *   glMatrixMode
 *   glMultMatrixf
 *   glMultMatrixd
 *   glOrtho
 *   glPopMatrix
 *   glPushMatrix
 *   glRotated
 *   glRotatef
 *   glScaled
 *   glScalef
 *   glTranslated
 *   glTranslatef
 *   glDrawArrays
 *   glDrawElements
 *   glGetPointerv
 *   glPolygonOffset
 *   glCopyTexImage1D
 *   glCopyTexImage2D
 *   glCopyTexSubImage1D
 *   glCopyTexSubImage2D
 *   glTexSubImage1D
 *   glTexSubImage2D
 *   glBindTexture
 *   glDeleteTextures
 *   glGenTextures
 *   glIsTexture
 *   glArrayElement
 *   glColorPointer
 *   glDisableClientState
 *   glEdgeFlagPointer
 *   glEnableClientState
 *   glIndexPointer
 *   glInterleavedArrays
 *   glNormalPointer
 *   glTexCoordPointer
 *   glVertexPointer
 *   glAreTexturesResident
 *   glPrioritizeTextures
 *   glIndexub
 *   glIndexubv
 *   glPopClientAttrib
 *   glPushClientAttrib
 */

#ifndef __gload_h__
#define __gload_h__

#define __gl_h_

#ifdef _WIN32
#ifdef APIENTRY
#undef APIENTRY
#endif
#define APIENTRY __stdcall
#endif

#ifndef APIENTRY
#define APIENTRY
#endif

#ifndef APIENTRYP
#define APIENTRYP APIENTRY*
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAPIENTRY
#endif

#ifndef GLAPI
#define GLAPI extern
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef unsigned int  GLenum;
typedef unsigned char GLboolean;
typedef unsigned int  GLbitfield;
typedef int	      GLsizei;
typedef GLsizei*      GLsizeiptr;
typedef float	      GLfloat;
typedef float	      GLclampf;
typedef double	      GLdouble;
typedef double	      GLclampd;
typedef void	      GLvoid;
typedef char	      GLchar;

typedef signed char  GLbyte;
typedef signed short GLshort;
typedef int	     GLint;
typedef GLint*	     GLintptr;

typedef unsigned char  GLubyte;
typedef unsigned short GLushort;
typedef unsigned int   GLuint;

GLAPI void gload_init(void);
/***** OpenGL 1.0 *****/
#define GL_VERSION_1_0
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_FALSE 0
#define GL_TRUE 1
#define GL_POINTS 0x0000
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_STRIP 0x0003
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_FAN 0x0006
#define GL_QUADS 0x0007
#define GL_NEVER 0x0200
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_ZERO 0
#define GL_ONE 1
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_NONE 0
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_NO_ERROR 0
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_OUT_OF_MEMORY 0x0505
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_VIEWPORT 0x0BA2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_DRAW_BUFFER 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_TEXTURE 0x1702
#define GL_COLOR 0x1800
#define GL_DEPTH 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_INDEX 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_GREEN 0x1904
#define GL_BLUE 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_POINT 0x1B00
#define GL_LINE 0x1B01
#define GL_FILL 0x1B02
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_REPEAT 0x2901
#define GL_CURRENT_BIT 0x00000001
#define GL_POINT_BIT 0x00000002
#define GL_LINE_BIT 0x00000004
#define GL_POLYGON_BIT 0x00000008
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_LIGHTING_BIT 0x00000040
#define GL_FOG_BIT 0x00000080
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_VIEWPORT_BIT 0x00000800
#define GL_TRANSFORM_BIT 0x00001000
#define GL_ENABLE_BIT 0x00002000
#define GL_HINT_BIT 0x00008000
#define GL_EVAL_BIT 0x00010000
#define GL_LIST_BIT 0x00020000
#define GL_TEXTURE_BIT 0x00040000
#define GL_SCISSOR_BIT 0x00080000
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_QUAD_STRIP 0x0008
#define GL_POLYGON 0x0009
#define GL_ACCUM 0x0100
#define GL_LOAD 0x0101
#define GL_RETURN 0x0102
#define GL_MULT 0x0103
#define GL_ADD 0x0104
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_2D 0x0600
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_POINT_TOKEN 0x0701
#define GL_LINE_TOKEN 0x0702
#define GL_POLYGON_TOKEN 0x0703
#define GL_BITMAP_TOKEN 0x0704
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_COEFF 0x0A00
#define GL_ORDER 0x0A01
#define GL_DOMAIN 0x0A02
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_POINT_SMOOTH 0x0B10
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LIST_MODE 0x0B30
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_LIST_BASE 0x0B32
#define GL_LIST_INDEX 0x0B33
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_EDGE_FLAG 0x0B43
#define GL_LIGHTING 0x0B50
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_SHADE_MODEL 0x0B54
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_MATERIAL 0x0B57
#define GL_FOG 0x0B60
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_START 0x0B63
#define GL_FOG_END 0x0B64
#define GL_FOG_MODE 0x0B65
#define GL_FOG_COLOR 0x0B66
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_MATRIX_MODE 0x0BA0
#define GL_NORMALIZE 0x0BA1
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_LOGIC_OP 0x0BF1
#define GL_AUX_BUFFERS 0x0C00
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_INDEX_MODE 0x0C30
#define GL_RGBA_MODE 0x0C31
#define GL_RENDER_MODE 0x0C40
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_FOG_HINT 0x0C54
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_OFFSET 0x0D13
#define GL_RED_SCALE 0x0D14
#define GL_RED_BIAS 0x0D15
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
#define GL_GREEN_SCALE 0x0D18
#define GL_GREEN_BIAS 0x0D19
#define GL_BLUE_SCALE 0x0D1A
#define GL_BLUE_BIAS 0x0D1B
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_BIAS 0x0D1F
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_INDEX_BITS 0x0D51
#define GL_RED_BITS 0x0D52
#define GL_GREEN_BITS 0x0D53
#define GL_BLUE_BITS 0x0D54
#define GL_ALPHA_BITS 0x0D55
#define GL_DEPTH_BITS 0x0D56
#define GL_STENCIL_BITS 0x0D57
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_AUTO_NORMAL 0x0D80
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_BORDER 0x1005
#define GL_AMBIENT 0x1200
#define GL_DIFFUSE 0x1201
#define GL_SPECULAR 0x1202
#define GL_POSITION 0x1203
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SPOT_CUTOFF 0x1206
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_2_BYTES 0x1407
#define GL_3_BYTES 0x1408
#define GL_4_BYTES 0x1409
#define GL_EMISSION 0x1600
#define GL_SHININESS 0x1601
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_COLOR_INDEXES 0x1603
#define GL_MODELVIEW 0x1700
#define GL_PROJECTION 0x1701
#define GL_COLOR_INDEX 0x1900
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_BITMAP 0x1A00
#define GL_RENDER 0x1C00
#define GL_FEEDBACK 0x1C01
#define GL_SELECT 0x1C02
#define GL_FLAT 0x1D00
#define GL_SMOOTH 0x1D01
#define GL_S 0x2000
#define GL_T 0x2001
#define GL_R 0x2002
#define GL_Q 0x2003
#define GL_MODULATE 0x2100
#define GL_DECAL 0x2101
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV 0x2300
#define GL_EYE_LINEAR 0x2400
#define GL_OBJECT_LINEAR 0x2401
#define GL_SPHERE_MAP 0x2402
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_OBJECT_PLANE 0x2501
#define GL_EYE_PLANE 0x2502
#define GL_CLAMP 0x2900
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define glCullFace gload_glCullFace
typedef void(APIENTRYP PFNGLCULLFACEPROC)(GLenum mode);
GLAPI PFNGLCULLFACEPROC gload_glCullFace;

#define glFrontFace gload_glFrontFace
typedef void(APIENTRYP PFNGLFRONTFACEPROC)(GLenum mode);
GLAPI PFNGLFRONTFACEPROC gload_glFrontFace;

#define glHint gload_glHint
typedef void(APIENTRYP PFNGLHINTPROC)(GLenum target, GLenum mode);
GLAPI PFNGLHINTPROC gload_glHint;

#define glLineWidth gload_glLineWidth
typedef void(APIENTRYP PFNGLLINEWIDTHPROC)(GLfloat width);
GLAPI PFNGLLINEWIDTHPROC gload_glLineWidth;

#define glPointSize gload_glPointSize
typedef void(APIENTRYP PFNGLPOINTSIZEPROC)(GLfloat size);
GLAPI PFNGLPOINTSIZEPROC gload_glPointSize;

#define glPolygonMode gload_glPolygonMode
typedef void(APIENTRYP PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
GLAPI PFNGLPOLYGONMODEPROC gload_glPolygonMode;

#define glScissor gload_glScissor
typedef void(APIENTRYP PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLSCISSORPROC gload_glScissor;

#define glTexParameterf gload_glTexParameterf
typedef void(APIENTRYP PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
GLAPI PFNGLTEXPARAMETERFPROC gload_glTexParameterf;

#define glTexParameterfv gload_glTexParameterfv
typedef void(APIENTRYP PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLTEXPARAMETERFVPROC gload_glTexParameterfv;

#define glTexParameteri gload_glTexParameteri
typedef void(APIENTRYP PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLTEXPARAMETERIPROC gload_glTexParameteri;

#define glTexParameteriv gload_glTexParameteriv
typedef void(APIENTRYP PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLTEXPARAMETERIVPROC gload_glTexParameteriv;

#define glTexImage1D gload_glTexImage1D
typedef void(APIENTRYP PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXIMAGE1DPROC gload_glTexImage1D;

#define glTexImage2D gload_glTexImage2D
typedef void(APIENTRYP PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXIMAGE2DPROC gload_glTexImage2D;

#define glDrawBuffer gload_glDrawBuffer
typedef void(APIENTRYP PFNGLDRAWBUFFERPROC)(GLenum buf);
GLAPI PFNGLDRAWBUFFERPROC gload_glDrawBuffer;

#define glClear gload_glClear
typedef void(APIENTRYP PFNGLCLEARPROC)(GLbitfield mask);
GLAPI PFNGLCLEARPROC gload_glClear;

#define glClearColor gload_glClearColor
typedef void(APIENTRYP PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLCLEARCOLORPROC gload_glClearColor;

#define glClearStencil gload_glClearStencil
typedef void(APIENTRYP PFNGLCLEARSTENCILPROC)(GLint s);
GLAPI PFNGLCLEARSTENCILPROC gload_glClearStencil;

#define glClearDepth gload_glClearDepth
typedef void(APIENTRYP PFNGLCLEARDEPTHPROC)(GLdouble depth);
GLAPI PFNGLCLEARDEPTHPROC gload_glClearDepth;

#define glStencilMask gload_glStencilMask
typedef void(APIENTRYP PFNGLSTENCILMASKPROC)(GLuint mask);
GLAPI PFNGLSTENCILMASKPROC gload_glStencilMask;

#define glColorMask gload_glColorMask
typedef void(APIENTRYP PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLAPI PFNGLCOLORMASKPROC gload_glColorMask;

#define glDepthMask gload_glDepthMask
typedef void(APIENTRYP PFNGLDEPTHMASKPROC)(GLboolean flag);
GLAPI PFNGLDEPTHMASKPROC gload_glDepthMask;

#define glDisable gload_glDisable
typedef void(APIENTRYP PFNGLDISABLEPROC)(GLenum cap);
GLAPI PFNGLDISABLEPROC gload_glDisable;

#define glEnable gload_glEnable
typedef void(APIENTRYP PFNGLENABLEPROC)(GLenum cap);
GLAPI PFNGLENABLEPROC gload_glEnable;

#define glFinish gload_glFinish
typedef void(APIENTRYP PFNGLFINISHPROC)(void);
GLAPI PFNGLFINISHPROC gload_glFinish;

#define glFlush gload_glFlush
typedef void(APIENTRYP PFNGLFLUSHPROC)(void);
GLAPI PFNGLFLUSHPROC gload_glFlush;

#define glBlendFunc gload_glBlendFunc
typedef void(APIENTRYP PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
GLAPI PFNGLBLENDFUNCPROC gload_glBlendFunc;

#define glLogicOp gload_glLogicOp
typedef void(APIENTRYP PFNGLLOGICOPPROC)(GLenum opcode);
GLAPI PFNGLLOGICOPPROC gload_glLogicOp;

#define glStencilFunc gload_glStencilFunc
typedef void(APIENTRYP PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
GLAPI PFNGLSTENCILFUNCPROC gload_glStencilFunc;

#define glStencilOp gload_glStencilOp
typedef void(APIENTRYP PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
GLAPI PFNGLSTENCILOPPROC gload_glStencilOp;

#define glDepthFunc gload_glDepthFunc
typedef void(APIENTRYP PFNGLDEPTHFUNCPROC)(GLenum func);
GLAPI PFNGLDEPTHFUNCPROC gload_glDepthFunc;

#define glPixelStoref gload_glPixelStoref
typedef void(APIENTRYP PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPIXELSTOREFPROC gload_glPixelStoref;

#define glPixelStorei gload_glPixelStorei
typedef void(APIENTRYP PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
GLAPI PFNGLPIXELSTOREIPROC gload_glPixelStorei;

#define glReadBuffer gload_glReadBuffer
typedef void(APIENTRYP PFNGLREADBUFFERPROC)(GLenum src);
GLAPI PFNGLREADBUFFERPROC gload_glReadBuffer;

#define glReadPixels gload_glReadPixels
typedef void(APIENTRYP PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
GLAPI PFNGLREADPIXELSPROC gload_glReadPixels;

#define glGetBooleanv gload_glGetBooleanv
typedef void(APIENTRYP PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean* data);
GLAPI PFNGLGETBOOLEANVPROC gload_glGetBooleanv;

#define glGetDoublev gload_glGetDoublev
typedef void(APIENTRYP PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble* data);
GLAPI PFNGLGETDOUBLEVPROC gload_glGetDoublev;

#define glGetError gload_glGetError
typedef GLenum(APIENTRYP PFNGLGETERRORPROC)(void);
GLAPI PFNGLGETERRORPROC gload_glGetError;

#define glGetFloatv gload_glGetFloatv
typedef void(APIENTRYP PFNGLGETFLOATVPROC)(GLenum pname, GLfloat* data);
GLAPI PFNGLGETFLOATVPROC gload_glGetFloatv;

#define glGetIntegerv gload_glGetIntegerv
typedef void(APIENTRYP PFNGLGETINTEGERVPROC)(GLenum pname, GLint* data);
GLAPI PFNGLGETINTEGERVPROC gload_glGetIntegerv;

#define glGetString gload_glGetString
typedef const GLubyte*(APIENTRYP PFNGLGETSTRINGPROC)(GLenum name);
GLAPI PFNGLGETSTRINGPROC gload_glGetString;

#define glGetTexImage gload_glGetTexImage
typedef void(APIENTRYP PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
GLAPI PFNGLGETTEXIMAGEPROC gload_glGetTexImage;

#define glGetTexParameterfv gload_glGetTexParameterfv
typedef void(APIENTRYP PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXPARAMETERFVPROC gload_glGetTexParameterfv;

#define glGetTexParameteriv gload_glGetTexParameteriv
typedef void(APIENTRYP PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXPARAMETERIVPROC gload_glGetTexParameteriv;

#define glGetTexLevelParameterfv gload_glGetTexLevelParameterfv
typedef void(APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXLEVELPARAMETERFVPROC gload_glGetTexLevelParameterfv;

#define glGetTexLevelParameteriv gload_glGetTexLevelParameteriv
typedef void(APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXLEVELPARAMETERIVPROC gload_glGetTexLevelParameteriv;

#define glIsEnabled gload_glIsEnabled
typedef GLboolean(APIENTRYP PFNGLISENABLEDPROC)(GLenum cap);
GLAPI PFNGLISENABLEDPROC gload_glIsEnabled;

#define glDepthRange gload_glDepthRange
typedef void(APIENTRYP PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
GLAPI PFNGLDEPTHRANGEPROC gload_glDepthRange;

#define glViewport gload_glViewport
typedef void(APIENTRYP PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLVIEWPORTPROC gload_glViewport;

#define glNewList gload_glNewList
typedef void(APIENTRYP PFNGLNEWLISTPROC)(GLuint list, GLenum mode);
GLAPI PFNGLNEWLISTPROC gload_glNewList;

#define glEndList gload_glEndList
typedef void(APIENTRYP PFNGLENDLISTPROC)(void);
GLAPI PFNGLENDLISTPROC gload_glEndList;

#define glCallList gload_glCallList
typedef void(APIENTRYP PFNGLCALLLISTPROC)(GLuint list);
GLAPI PFNGLCALLLISTPROC gload_glCallList;

#define glCallLists gload_glCallLists
typedef void(APIENTRYP PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void* lists);
GLAPI PFNGLCALLLISTSPROC gload_glCallLists;

#define glDeleteLists gload_glDeleteLists
typedef void(APIENTRYP PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);
GLAPI PFNGLDELETELISTSPROC gload_glDeleteLists;

#define glGenLists gload_glGenLists
typedef GLuint(APIENTRYP PFNGLGENLISTSPROC)(GLsizei range);
GLAPI PFNGLGENLISTSPROC gload_glGenLists;

#define glListBase gload_glListBase
typedef void(APIENTRYP PFNGLLISTBASEPROC)(GLuint base);
GLAPI PFNGLLISTBASEPROC gload_glListBase;

#define glBegin gload_glBegin
typedef void(APIENTRYP PFNGLBEGINPROC)(GLenum mode);
GLAPI PFNGLBEGINPROC gload_glBegin;

#define glBitmap gload_glBitmap
typedef void(APIENTRYP PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap);
GLAPI PFNGLBITMAPPROC gload_glBitmap;

#define glColor3b gload_glColor3b
typedef void(APIENTRYP PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
GLAPI PFNGLCOLOR3BPROC gload_glColor3b;

#define glColor3bv gload_glColor3bv
typedef void(APIENTRYP PFNGLCOLOR3BVPROC)(const GLbyte* v);
GLAPI PFNGLCOLOR3BVPROC gload_glColor3bv;

#define glColor3d gload_glColor3d
typedef void(APIENTRYP PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
GLAPI PFNGLCOLOR3DPROC gload_glColor3d;

#define glColor3dv gload_glColor3dv
typedef void(APIENTRYP PFNGLCOLOR3DVPROC)(const GLdouble* v);
GLAPI PFNGLCOLOR3DVPROC gload_glColor3dv;

#define glColor3f gload_glColor3f
typedef void(APIENTRYP PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
GLAPI PFNGLCOLOR3FPROC gload_glColor3f;

#define glColor3fv gload_glColor3fv
typedef void(APIENTRYP PFNGLCOLOR3FVPROC)(const GLfloat* v);
GLAPI PFNGLCOLOR3FVPROC gload_glColor3fv;

#define glColor3i gload_glColor3i
typedef void(APIENTRYP PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
GLAPI PFNGLCOLOR3IPROC gload_glColor3i;

#define glColor3iv gload_glColor3iv
typedef void(APIENTRYP PFNGLCOLOR3IVPROC)(const GLint* v);
GLAPI PFNGLCOLOR3IVPROC gload_glColor3iv;

#define glColor3s gload_glColor3s
typedef void(APIENTRYP PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
GLAPI PFNGLCOLOR3SPROC gload_glColor3s;

#define glColor3sv gload_glColor3sv
typedef void(APIENTRYP PFNGLCOLOR3SVPROC)(const GLshort* v);
GLAPI PFNGLCOLOR3SVPROC gload_glColor3sv;

#define glColor3ub gload_glColor3ub
typedef void(APIENTRYP PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
GLAPI PFNGLCOLOR3UBPROC gload_glColor3ub;

#define glColor3ubv gload_glColor3ubv
typedef void(APIENTRYP PFNGLCOLOR3UBVPROC)(const GLubyte* v);
GLAPI PFNGLCOLOR3UBVPROC gload_glColor3ubv;

#define glColor3ui gload_glColor3ui
typedef void(APIENTRYP PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
GLAPI PFNGLCOLOR3UIPROC gload_glColor3ui;

#define glColor3uiv gload_glColor3uiv
typedef void(APIENTRYP PFNGLCOLOR3UIVPROC)(const GLuint* v);
GLAPI PFNGLCOLOR3UIVPROC gload_glColor3uiv;

#define glColor3us gload_glColor3us
typedef void(APIENTRYP PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
GLAPI PFNGLCOLOR3USPROC gload_glColor3us;

#define glColor3usv gload_glColor3usv
typedef void(APIENTRYP PFNGLCOLOR3USVPROC)(const GLushort* v);
GLAPI PFNGLCOLOR3USVPROC gload_glColor3usv;

#define glColor4b gload_glColor4b
typedef void(APIENTRYP PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
GLAPI PFNGLCOLOR4BPROC gload_glColor4b;

#define glColor4bv gload_glColor4bv
typedef void(APIENTRYP PFNGLCOLOR4BVPROC)(const GLbyte* v);
GLAPI PFNGLCOLOR4BVPROC gload_glColor4bv;

#define glColor4d gload_glColor4d
typedef void(APIENTRYP PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
GLAPI PFNGLCOLOR4DPROC gload_glColor4d;

#define glColor4dv gload_glColor4dv
typedef void(APIENTRYP PFNGLCOLOR4DVPROC)(const GLdouble* v);
GLAPI PFNGLCOLOR4DVPROC gload_glColor4dv;

#define glColor4f gload_glColor4f
typedef void(APIENTRYP PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLCOLOR4FPROC gload_glColor4f;

#define glColor4fv gload_glColor4fv
typedef void(APIENTRYP PFNGLCOLOR4FVPROC)(const GLfloat* v);
GLAPI PFNGLCOLOR4FVPROC gload_glColor4fv;

#define glColor4i gload_glColor4i
typedef void(APIENTRYP PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
GLAPI PFNGLCOLOR4IPROC gload_glColor4i;

#define glColor4iv gload_glColor4iv
typedef void(APIENTRYP PFNGLCOLOR4IVPROC)(const GLint* v);
GLAPI PFNGLCOLOR4IVPROC gload_glColor4iv;

#define glColor4s gload_glColor4s
typedef void(APIENTRYP PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
GLAPI PFNGLCOLOR4SPROC gload_glColor4s;

#define glColor4sv gload_glColor4sv
typedef void(APIENTRYP PFNGLCOLOR4SVPROC)(const GLshort* v);
GLAPI PFNGLCOLOR4SVPROC gload_glColor4sv;

#define glColor4ub gload_glColor4ub
typedef void(APIENTRYP PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
GLAPI PFNGLCOLOR4UBPROC gload_glColor4ub;

#define glColor4ubv gload_glColor4ubv
typedef void(APIENTRYP PFNGLCOLOR4UBVPROC)(const GLubyte* v);
GLAPI PFNGLCOLOR4UBVPROC gload_glColor4ubv;

#define glColor4ui gload_glColor4ui
typedef void(APIENTRYP PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
GLAPI PFNGLCOLOR4UIPROC gload_glColor4ui;

#define glColor4uiv gload_glColor4uiv
typedef void(APIENTRYP PFNGLCOLOR4UIVPROC)(const GLuint* v);
GLAPI PFNGLCOLOR4UIVPROC gload_glColor4uiv;

#define glColor4us gload_glColor4us
typedef void(APIENTRYP PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
GLAPI PFNGLCOLOR4USPROC gload_glColor4us;

#define glColor4usv gload_glColor4usv
typedef void(APIENTRYP PFNGLCOLOR4USVPROC)(const GLushort* v);
GLAPI PFNGLCOLOR4USVPROC gload_glColor4usv;

#define glEdgeFlag gload_glEdgeFlag
typedef void(APIENTRYP PFNGLEDGEFLAGPROC)(GLboolean flag);
GLAPI PFNGLEDGEFLAGPROC gload_glEdgeFlag;

#define glEdgeFlagv gload_glEdgeFlagv
typedef void(APIENTRYP PFNGLEDGEFLAGVPROC)(const GLboolean* flag);
GLAPI PFNGLEDGEFLAGVPROC gload_glEdgeFlagv;

#define glEnd gload_glEnd
typedef void(APIENTRYP PFNGLENDPROC)(void);
GLAPI PFNGLENDPROC gload_glEnd;

#define glIndexd gload_glIndexd
typedef void(APIENTRYP PFNGLINDEXDPROC)(GLdouble c);
GLAPI PFNGLINDEXDPROC gload_glIndexd;

#define glIndexdv gload_glIndexdv
typedef void(APIENTRYP PFNGLINDEXDVPROC)(const GLdouble* c);
GLAPI PFNGLINDEXDVPROC gload_glIndexdv;

#define glIndexf gload_glIndexf
typedef void(APIENTRYP PFNGLINDEXFPROC)(GLfloat c);
GLAPI PFNGLINDEXFPROC gload_glIndexf;

#define glIndexfv gload_glIndexfv
typedef void(APIENTRYP PFNGLINDEXFVPROC)(const GLfloat* c);
GLAPI PFNGLINDEXFVPROC gload_glIndexfv;

#define glIndexi gload_glIndexi
typedef void(APIENTRYP PFNGLINDEXIPROC)(GLint c);
GLAPI PFNGLINDEXIPROC gload_glIndexi;

#define glIndexiv gload_glIndexiv
typedef void(APIENTRYP PFNGLINDEXIVPROC)(const GLint* c);
GLAPI PFNGLINDEXIVPROC gload_glIndexiv;

#define glIndexs gload_glIndexs
typedef void(APIENTRYP PFNGLINDEXSPROC)(GLshort c);
GLAPI PFNGLINDEXSPROC gload_glIndexs;

#define glIndexsv gload_glIndexsv
typedef void(APIENTRYP PFNGLINDEXSVPROC)(const GLshort* c);
GLAPI PFNGLINDEXSVPROC gload_glIndexsv;

#define glNormal3b gload_glNormal3b
typedef void(APIENTRYP PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
GLAPI PFNGLNORMAL3BPROC gload_glNormal3b;

#define glNormal3bv gload_glNormal3bv
typedef void(APIENTRYP PFNGLNORMAL3BVPROC)(const GLbyte* v);
GLAPI PFNGLNORMAL3BVPROC gload_glNormal3bv;

#define glNormal3d gload_glNormal3d
typedef void(APIENTRYP PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
GLAPI PFNGLNORMAL3DPROC gload_glNormal3d;

#define glNormal3dv gload_glNormal3dv
typedef void(APIENTRYP PFNGLNORMAL3DVPROC)(const GLdouble* v);
GLAPI PFNGLNORMAL3DVPROC gload_glNormal3dv;

#define glNormal3f gload_glNormal3f
typedef void(APIENTRYP PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
GLAPI PFNGLNORMAL3FPROC gload_glNormal3f;

#define glNormal3fv gload_glNormal3fv
typedef void(APIENTRYP PFNGLNORMAL3FVPROC)(const GLfloat* v);
GLAPI PFNGLNORMAL3FVPROC gload_glNormal3fv;

#define glNormal3i gload_glNormal3i
typedef void(APIENTRYP PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
GLAPI PFNGLNORMAL3IPROC gload_glNormal3i;

#define glNormal3iv gload_glNormal3iv
typedef void(APIENTRYP PFNGLNORMAL3IVPROC)(const GLint* v);
GLAPI PFNGLNORMAL3IVPROC gload_glNormal3iv;

#define glNormal3s gload_glNormal3s
typedef void(APIENTRYP PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
GLAPI PFNGLNORMAL3SPROC gload_glNormal3s;

#define glNormal3sv gload_glNormal3sv
typedef void(APIENTRYP PFNGLNORMAL3SVPROC)(const GLshort* v);
GLAPI PFNGLNORMAL3SVPROC gload_glNormal3sv;

#define glRasterPos2d gload_glRasterPos2d
typedef void(APIENTRYP PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
GLAPI PFNGLRASTERPOS2DPROC gload_glRasterPos2d;

#define glRasterPos2dv gload_glRasterPos2dv
typedef void(APIENTRYP PFNGLRASTERPOS2DVPROC)(const GLdouble* v);
GLAPI PFNGLRASTERPOS2DVPROC gload_glRasterPos2dv;

#define glRasterPos2f gload_glRasterPos2f
typedef void(APIENTRYP PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
GLAPI PFNGLRASTERPOS2FPROC gload_glRasterPos2f;

#define glRasterPos2fv gload_glRasterPos2fv
typedef void(APIENTRYP PFNGLRASTERPOS2FVPROC)(const GLfloat* v);
GLAPI PFNGLRASTERPOS2FVPROC gload_glRasterPos2fv;

#define glRasterPos2i gload_glRasterPos2i
typedef void(APIENTRYP PFNGLRASTERPOS2IPROC)(GLint x, GLint y);
GLAPI PFNGLRASTERPOS2IPROC gload_glRasterPos2i;

#define glRasterPos2iv gload_glRasterPos2iv
typedef void(APIENTRYP PFNGLRASTERPOS2IVPROC)(const GLint* v);
GLAPI PFNGLRASTERPOS2IVPROC gload_glRasterPos2iv;

#define glRasterPos2s gload_glRasterPos2s
typedef void(APIENTRYP PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);
GLAPI PFNGLRASTERPOS2SPROC gload_glRasterPos2s;

#define glRasterPos2sv gload_glRasterPos2sv
typedef void(APIENTRYP PFNGLRASTERPOS2SVPROC)(const GLshort* v);
GLAPI PFNGLRASTERPOS2SVPROC gload_glRasterPos2sv;

#define glRasterPos3d gload_glRasterPos3d
typedef void(APIENTRYP PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLRASTERPOS3DPROC gload_glRasterPos3d;

#define glRasterPos3dv gload_glRasterPos3dv
typedef void(APIENTRYP PFNGLRASTERPOS3DVPROC)(const GLdouble* v);
GLAPI PFNGLRASTERPOS3DVPROC gload_glRasterPos3dv;

#define glRasterPos3f gload_glRasterPos3f
typedef void(APIENTRYP PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLRASTERPOS3FPROC gload_glRasterPos3f;

#define glRasterPos3fv gload_glRasterPos3fv
typedef void(APIENTRYP PFNGLRASTERPOS3FVPROC)(const GLfloat* v);
GLAPI PFNGLRASTERPOS3FVPROC gload_glRasterPos3fv;

#define glRasterPos3i gload_glRasterPos3i
typedef void(APIENTRYP PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
GLAPI PFNGLRASTERPOS3IPROC gload_glRasterPos3i;

#define glRasterPos3iv gload_glRasterPos3iv
typedef void(APIENTRYP PFNGLRASTERPOS3IVPROC)(const GLint* v);
GLAPI PFNGLRASTERPOS3IVPROC gload_glRasterPos3iv;

#define glRasterPos3s gload_glRasterPos3s
typedef void(APIENTRYP PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
GLAPI PFNGLRASTERPOS3SPROC gload_glRasterPos3s;

#define glRasterPos3sv gload_glRasterPos3sv
typedef void(APIENTRYP PFNGLRASTERPOS3SVPROC)(const GLshort* v);
GLAPI PFNGLRASTERPOS3SVPROC gload_glRasterPos3sv;

#define glRasterPos4d gload_glRasterPos4d
typedef void(APIENTRYP PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLRASTERPOS4DPROC gload_glRasterPos4d;

#define glRasterPos4dv gload_glRasterPos4dv
typedef void(APIENTRYP PFNGLRASTERPOS4DVPROC)(const GLdouble* v);
GLAPI PFNGLRASTERPOS4DVPROC gload_glRasterPos4dv;

#define glRasterPos4f gload_glRasterPos4f
typedef void(APIENTRYP PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLRASTERPOS4FPROC gload_glRasterPos4f;

#define glRasterPos4fv gload_glRasterPos4fv
typedef void(APIENTRYP PFNGLRASTERPOS4FVPROC)(const GLfloat* v);
GLAPI PFNGLRASTERPOS4FVPROC gload_glRasterPos4fv;

#define glRasterPos4i gload_glRasterPos4i
typedef void(APIENTRYP PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
GLAPI PFNGLRASTERPOS4IPROC gload_glRasterPos4i;

#define glRasterPos4iv gload_glRasterPos4iv
typedef void(APIENTRYP PFNGLRASTERPOS4IVPROC)(const GLint* v);
GLAPI PFNGLRASTERPOS4IVPROC gload_glRasterPos4iv;

#define glRasterPos4s gload_glRasterPos4s
typedef void(APIENTRYP PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI PFNGLRASTERPOS4SPROC gload_glRasterPos4s;

#define glRasterPos4sv gload_glRasterPos4sv
typedef void(APIENTRYP PFNGLRASTERPOS4SVPROC)(const GLshort* v);
GLAPI PFNGLRASTERPOS4SVPROC gload_glRasterPos4sv;

#define glRectd gload_glRectd
typedef void(APIENTRYP PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
GLAPI PFNGLRECTDPROC gload_glRectd;

#define glRectdv gload_glRectdv
typedef void(APIENTRYP PFNGLRECTDVPROC)(const GLdouble* v1, const GLdouble* v2);
GLAPI PFNGLRECTDVPROC gload_glRectdv;

#define glRectf gload_glRectf
typedef void(APIENTRYP PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
GLAPI PFNGLRECTFPROC gload_glRectf;

#define glRectfv gload_glRectfv
typedef void(APIENTRYP PFNGLRECTFVPROC)(const GLfloat* v1, const GLfloat* v2);
GLAPI PFNGLRECTFVPROC gload_glRectfv;

#define glRecti gload_glRecti
typedef void(APIENTRYP PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
GLAPI PFNGLRECTIPROC gload_glRecti;

#define glRectiv gload_glRectiv
typedef void(APIENTRYP PFNGLRECTIVPROC)(const GLint* v1, const GLint* v2);
GLAPI PFNGLRECTIVPROC gload_glRectiv;

#define glRects gload_glRects
typedef void(APIENTRYP PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
GLAPI PFNGLRECTSPROC gload_glRects;

#define glRectsv gload_glRectsv
typedef void(APIENTRYP PFNGLRECTSVPROC)(const GLshort* v1, const GLshort* v2);
GLAPI PFNGLRECTSVPROC gload_glRectsv;

#define glTexCoord1d gload_glTexCoord1d
typedef void(APIENTRYP PFNGLTEXCOORD1DPROC)(GLdouble s);
GLAPI PFNGLTEXCOORD1DPROC gload_glTexCoord1d;

#define glTexCoord1dv gload_glTexCoord1dv
typedef void(APIENTRYP PFNGLTEXCOORD1DVPROC)(const GLdouble* v);
GLAPI PFNGLTEXCOORD1DVPROC gload_glTexCoord1dv;

#define glTexCoord1f gload_glTexCoord1f
typedef void(APIENTRYP PFNGLTEXCOORD1FPROC)(GLfloat s);
GLAPI PFNGLTEXCOORD1FPROC gload_glTexCoord1f;

#define glTexCoord1fv gload_glTexCoord1fv
typedef void(APIENTRYP PFNGLTEXCOORD1FVPROC)(const GLfloat* v);
GLAPI PFNGLTEXCOORD1FVPROC gload_glTexCoord1fv;

#define glTexCoord1i gload_glTexCoord1i
typedef void(APIENTRYP PFNGLTEXCOORD1IPROC)(GLint s);
GLAPI PFNGLTEXCOORD1IPROC gload_glTexCoord1i;

#define glTexCoord1iv gload_glTexCoord1iv
typedef void(APIENTRYP PFNGLTEXCOORD1IVPROC)(const GLint* v);
GLAPI PFNGLTEXCOORD1IVPROC gload_glTexCoord1iv;

#define glTexCoord1s gload_glTexCoord1s
typedef void(APIENTRYP PFNGLTEXCOORD1SPROC)(GLshort s);
GLAPI PFNGLTEXCOORD1SPROC gload_glTexCoord1s;

#define glTexCoord1sv gload_glTexCoord1sv
typedef void(APIENTRYP PFNGLTEXCOORD1SVPROC)(const GLshort* v);
GLAPI PFNGLTEXCOORD1SVPROC gload_glTexCoord1sv;

#define glTexCoord2d gload_glTexCoord2d
typedef void(APIENTRYP PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
GLAPI PFNGLTEXCOORD2DPROC gload_glTexCoord2d;

#define glTexCoord2dv gload_glTexCoord2dv
typedef void(APIENTRYP PFNGLTEXCOORD2DVPROC)(const GLdouble* v);
GLAPI PFNGLTEXCOORD2DVPROC gload_glTexCoord2dv;

#define glTexCoord2f gload_glTexCoord2f
typedef void(APIENTRYP PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
GLAPI PFNGLTEXCOORD2FPROC gload_glTexCoord2f;

#define glTexCoord2fv gload_glTexCoord2fv
typedef void(APIENTRYP PFNGLTEXCOORD2FVPROC)(const GLfloat* v);
GLAPI PFNGLTEXCOORD2FVPROC gload_glTexCoord2fv;

#define glTexCoord2i gload_glTexCoord2i
typedef void(APIENTRYP PFNGLTEXCOORD2IPROC)(GLint s, GLint t);
GLAPI PFNGLTEXCOORD2IPROC gload_glTexCoord2i;

#define glTexCoord2iv gload_glTexCoord2iv
typedef void(APIENTRYP PFNGLTEXCOORD2IVPROC)(const GLint* v);
GLAPI PFNGLTEXCOORD2IVPROC gload_glTexCoord2iv;

#define glTexCoord2s gload_glTexCoord2s
typedef void(APIENTRYP PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);
GLAPI PFNGLTEXCOORD2SPROC gload_glTexCoord2s;

#define glTexCoord2sv gload_glTexCoord2sv
typedef void(APIENTRYP PFNGLTEXCOORD2SVPROC)(const GLshort* v);
GLAPI PFNGLTEXCOORD2SVPROC gload_glTexCoord2sv;

#define glTexCoord3d gload_glTexCoord3d
typedef void(APIENTRYP PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
GLAPI PFNGLTEXCOORD3DPROC gload_glTexCoord3d;

#define glTexCoord3dv gload_glTexCoord3dv
typedef void(APIENTRYP PFNGLTEXCOORD3DVPROC)(const GLdouble* v);
GLAPI PFNGLTEXCOORD3DVPROC gload_glTexCoord3dv;

#define glTexCoord3f gload_glTexCoord3f
typedef void(APIENTRYP PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
GLAPI PFNGLTEXCOORD3FPROC gload_glTexCoord3f;

#define glTexCoord3fv gload_glTexCoord3fv
typedef void(APIENTRYP PFNGLTEXCOORD3FVPROC)(const GLfloat* v);
GLAPI PFNGLTEXCOORD3FVPROC gload_glTexCoord3fv;

#define glTexCoord3i gload_glTexCoord3i
typedef void(APIENTRYP PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
GLAPI PFNGLTEXCOORD3IPROC gload_glTexCoord3i;

#define glTexCoord3iv gload_glTexCoord3iv
typedef void(APIENTRYP PFNGLTEXCOORD3IVPROC)(const GLint* v);
GLAPI PFNGLTEXCOORD3IVPROC gload_glTexCoord3iv;

#define glTexCoord3s gload_glTexCoord3s
typedef void(APIENTRYP PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
GLAPI PFNGLTEXCOORD3SPROC gload_glTexCoord3s;

#define glTexCoord3sv gload_glTexCoord3sv
typedef void(APIENTRYP PFNGLTEXCOORD3SVPROC)(const GLshort* v);
GLAPI PFNGLTEXCOORD3SVPROC gload_glTexCoord3sv;

#define glTexCoord4d gload_glTexCoord4d
typedef void(APIENTRYP PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
GLAPI PFNGLTEXCOORD4DPROC gload_glTexCoord4d;

#define glTexCoord4dv gload_glTexCoord4dv
typedef void(APIENTRYP PFNGLTEXCOORD4DVPROC)(const GLdouble* v);
GLAPI PFNGLTEXCOORD4DVPROC gload_glTexCoord4dv;

#define glTexCoord4f gload_glTexCoord4f
typedef void(APIENTRYP PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
GLAPI PFNGLTEXCOORD4FPROC gload_glTexCoord4f;

#define glTexCoord4fv gload_glTexCoord4fv
typedef void(APIENTRYP PFNGLTEXCOORD4FVPROC)(const GLfloat* v);
GLAPI PFNGLTEXCOORD4FVPROC gload_glTexCoord4fv;

#define glTexCoord4i gload_glTexCoord4i
typedef void(APIENTRYP PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
GLAPI PFNGLTEXCOORD4IPROC gload_glTexCoord4i;

#define glTexCoord4iv gload_glTexCoord4iv
typedef void(APIENTRYP PFNGLTEXCOORD4IVPROC)(const GLint* v);
GLAPI PFNGLTEXCOORD4IVPROC gload_glTexCoord4iv;

#define glTexCoord4s gload_glTexCoord4s
typedef void(APIENTRYP PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
GLAPI PFNGLTEXCOORD4SPROC gload_glTexCoord4s;

#define glTexCoord4sv gload_glTexCoord4sv
typedef void(APIENTRYP PFNGLTEXCOORD4SVPROC)(const GLshort* v);
GLAPI PFNGLTEXCOORD4SVPROC gload_glTexCoord4sv;

#define glVertex2d gload_glVertex2d
typedef void(APIENTRYP PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);
GLAPI PFNGLVERTEX2DPROC gload_glVertex2d;

#define glVertex2dv gload_glVertex2dv
typedef void(APIENTRYP PFNGLVERTEX2DVPROC)(const GLdouble* v);
GLAPI PFNGLVERTEX2DVPROC gload_glVertex2dv;

#define glVertex2f gload_glVertex2f
typedef void(APIENTRYP PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);
GLAPI PFNGLVERTEX2FPROC gload_glVertex2f;

#define glVertex2fv gload_glVertex2fv
typedef void(APIENTRYP PFNGLVERTEX2FVPROC)(const GLfloat* v);
GLAPI PFNGLVERTEX2FVPROC gload_glVertex2fv;

#define glVertex2i gload_glVertex2i
typedef void(APIENTRYP PFNGLVERTEX2IPROC)(GLint x, GLint y);
GLAPI PFNGLVERTEX2IPROC gload_glVertex2i;

#define glVertex2iv gload_glVertex2iv
typedef void(APIENTRYP PFNGLVERTEX2IVPROC)(const GLint* v);
GLAPI PFNGLVERTEX2IVPROC gload_glVertex2iv;

#define glVertex2s gload_glVertex2s
typedef void(APIENTRYP PFNGLVERTEX2SPROC)(GLshort x, GLshort y);
GLAPI PFNGLVERTEX2SPROC gload_glVertex2s;

#define glVertex2sv gload_glVertex2sv
typedef void(APIENTRYP PFNGLVERTEX2SVPROC)(const GLshort* v);
GLAPI PFNGLVERTEX2SVPROC gload_glVertex2sv;

#define glVertex3d gload_glVertex3d
typedef void(APIENTRYP PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEX3DPROC gload_glVertex3d;

#define glVertex3dv gload_glVertex3dv
typedef void(APIENTRYP PFNGLVERTEX3DVPROC)(const GLdouble* v);
GLAPI PFNGLVERTEX3DVPROC gload_glVertex3dv;

#define glVertex3f gload_glVertex3f
typedef void(APIENTRYP PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLVERTEX3FPROC gload_glVertex3f;

#define glVertex3fv gload_glVertex3fv
typedef void(APIENTRYP PFNGLVERTEX3FVPROC)(const GLfloat* v);
GLAPI PFNGLVERTEX3FVPROC gload_glVertex3fv;

#define glVertex3i gload_glVertex3i
typedef void(APIENTRYP PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
GLAPI PFNGLVERTEX3IPROC gload_glVertex3i;

#define glVertex3iv gload_glVertex3iv
typedef void(APIENTRYP PFNGLVERTEX3IVPROC)(const GLint* v);
GLAPI PFNGLVERTEX3IVPROC gload_glVertex3iv;

#define glVertex3s gload_glVertex3s
typedef void(APIENTRYP PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
GLAPI PFNGLVERTEX3SPROC gload_glVertex3s;

#define glVertex3sv gload_glVertex3sv
typedef void(APIENTRYP PFNGLVERTEX3SVPROC)(const GLshort* v);
GLAPI PFNGLVERTEX3SVPROC gload_glVertex3sv;

#define glVertex4d gload_glVertex4d
typedef void(APIENTRYP PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEX4DPROC gload_glVertex4d;

#define glVertex4dv gload_glVertex4dv
typedef void(APIENTRYP PFNGLVERTEX4DVPROC)(const GLdouble* v);
GLAPI PFNGLVERTEX4DVPROC gload_glVertex4dv;

#define glVertex4f gload_glVertex4f
typedef void(APIENTRYP PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLVERTEX4FPROC gload_glVertex4f;

#define glVertex4fv gload_glVertex4fv
typedef void(APIENTRYP PFNGLVERTEX4FVPROC)(const GLfloat* v);
GLAPI PFNGLVERTEX4FVPROC gload_glVertex4fv;

#define glVertex4i gload_glVertex4i
typedef void(APIENTRYP PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
GLAPI PFNGLVERTEX4IPROC gload_glVertex4i;

#define glVertex4iv gload_glVertex4iv
typedef void(APIENTRYP PFNGLVERTEX4IVPROC)(const GLint* v);
GLAPI PFNGLVERTEX4IVPROC gload_glVertex4iv;

#define glVertex4s gload_glVertex4s
typedef void(APIENTRYP PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI PFNGLVERTEX4SPROC gload_glVertex4s;

#define glVertex4sv gload_glVertex4sv
typedef void(APIENTRYP PFNGLVERTEX4SVPROC)(const GLshort* v);
GLAPI PFNGLVERTEX4SVPROC gload_glVertex4sv;

#define glClipPlane gload_glClipPlane
typedef void(APIENTRYP PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble* equation);
GLAPI PFNGLCLIPPLANEPROC gload_glClipPlane;

#define glColorMaterial gload_glColorMaterial
typedef void(APIENTRYP PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
GLAPI PFNGLCOLORMATERIALPROC gload_glColorMaterial;

#define glFogf gload_glFogf
typedef void(APIENTRYP PFNGLFOGFPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLFOGFPROC gload_glFogf;

#define glFogfv gload_glFogfv
typedef void(APIENTRYP PFNGLFOGFVPROC)(GLenum pname, const GLfloat* params);
GLAPI PFNGLFOGFVPROC gload_glFogfv;

#define glFogi gload_glFogi
typedef void(APIENTRYP PFNGLFOGIPROC)(GLenum pname, GLint param);
GLAPI PFNGLFOGIPROC gload_glFogi;

#define glFogiv gload_glFogiv
typedef void(APIENTRYP PFNGLFOGIVPROC)(GLenum pname, const GLint* params);
GLAPI PFNGLFOGIVPROC gload_glFogiv;

#define glLightf gload_glLightf
typedef void(APIENTRYP PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
GLAPI PFNGLLIGHTFPROC gload_glLightf;

#define glLightfv gload_glLightfv
typedef void(APIENTRYP PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat* params);
GLAPI PFNGLLIGHTFVPROC gload_glLightfv;

#define glLighti gload_glLighti
typedef void(APIENTRYP PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
GLAPI PFNGLLIGHTIPROC gload_glLighti;

#define glLightiv gload_glLightiv
typedef void(APIENTRYP PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint* params);
GLAPI PFNGLLIGHTIVPROC gload_glLightiv;

#define glLightModelf gload_glLightModelf
typedef void(APIENTRYP PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLLIGHTMODELFPROC gload_glLightModelf;

#define glLightModelfv gload_glLightModelfv
typedef void(APIENTRYP PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat* params);
GLAPI PFNGLLIGHTMODELFVPROC gload_glLightModelfv;

#define glLightModeli gload_glLightModeli
typedef void(APIENTRYP PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);
GLAPI PFNGLLIGHTMODELIPROC gload_glLightModeli;

#define glLightModeliv gload_glLightModeliv
typedef void(APIENTRYP PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint* params);
GLAPI PFNGLLIGHTMODELIVPROC gload_glLightModeliv;

#define glLineStipple gload_glLineStipple
typedef void(APIENTRYP PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
GLAPI PFNGLLINESTIPPLEPROC gload_glLineStipple;

#define glMaterialf gload_glMaterialf
typedef void(APIENTRYP PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
GLAPI PFNGLMATERIALFPROC gload_glMaterialf;

#define glMaterialfv gload_glMaterialfv
typedef void(APIENTRYP PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat* params);
GLAPI PFNGLMATERIALFVPROC gload_glMaterialfv;

#define glMateriali gload_glMateriali
typedef void(APIENTRYP PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
GLAPI PFNGLMATERIALIPROC gload_glMateriali;

#define glMaterialiv gload_glMaterialiv
typedef void(APIENTRYP PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint* params);
GLAPI PFNGLMATERIALIVPROC gload_glMaterialiv;

#define glPolygonStipple gload_glPolygonStipple
typedef void(APIENTRYP PFNGLPOLYGONSTIPPLEPROC)(const GLubyte* mask);
GLAPI PFNGLPOLYGONSTIPPLEPROC gload_glPolygonStipple;

#define glShadeModel gload_glShadeModel
typedef void(APIENTRYP PFNGLSHADEMODELPROC)(GLenum mode);
GLAPI PFNGLSHADEMODELPROC gload_glShadeModel;

#define glTexEnvf gload_glTexEnvf
typedef void(APIENTRYP PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
GLAPI PFNGLTEXENVFPROC gload_glTexEnvf;

#define glTexEnvfv gload_glTexEnvfv
typedef void(APIENTRYP PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLTEXENVFVPROC gload_glTexEnvfv;

#define glTexEnvi gload_glTexEnvi
typedef void(APIENTRYP PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLTEXENVIPROC gload_glTexEnvi;

#define glTexEnviv gload_glTexEnviv
typedef void(APIENTRYP PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLTEXENVIVPROC gload_glTexEnviv;

#define glTexGend gload_glTexGend
typedef void(APIENTRYP PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
GLAPI PFNGLTEXGENDPROC gload_glTexGend;

#define glTexGendv gload_glTexGendv
typedef void(APIENTRYP PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble* params);
GLAPI PFNGLTEXGENDVPROC gload_glTexGendv;

#define glTexGenf gload_glTexGenf
typedef void(APIENTRYP PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
GLAPI PFNGLTEXGENFPROC gload_glTexGenf;

#define glTexGenfv gload_glTexGenfv
typedef void(APIENTRYP PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat* params);
GLAPI PFNGLTEXGENFVPROC gload_glTexGenfv;

#define glTexGeni gload_glTexGeni
typedef void(APIENTRYP PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
GLAPI PFNGLTEXGENIPROC gload_glTexGeni;

#define glTexGeniv gload_glTexGeniv
typedef void(APIENTRYP PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint* params);
GLAPI PFNGLTEXGENIVPROC gload_glTexGeniv;

#define glFeedbackBuffer gload_glFeedbackBuffer
typedef void(APIENTRYP PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat* buffer);
GLAPI PFNGLFEEDBACKBUFFERPROC gload_glFeedbackBuffer;

#define glSelectBuffer gload_glSelectBuffer
typedef void(APIENTRYP PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint* buffer);
GLAPI PFNGLSELECTBUFFERPROC gload_glSelectBuffer;

#define glRenderMode gload_glRenderMode
typedef GLint(APIENTRYP PFNGLRENDERMODEPROC)(GLenum mode);
GLAPI PFNGLRENDERMODEPROC gload_glRenderMode;

#define glInitNames gload_glInitNames
typedef void(APIENTRYP PFNGLINITNAMESPROC)(void);
GLAPI PFNGLINITNAMESPROC gload_glInitNames;

#define glLoadName gload_glLoadName
typedef void(APIENTRYP PFNGLLOADNAMEPROC)(GLuint name);
GLAPI PFNGLLOADNAMEPROC gload_glLoadName;

#define glPassThrough gload_glPassThrough
typedef void(APIENTRYP PFNGLPASSTHROUGHPROC)(GLfloat token);
GLAPI PFNGLPASSTHROUGHPROC gload_glPassThrough;

#define glPopName gload_glPopName
typedef void(APIENTRYP PFNGLPOPNAMEPROC)(void);
GLAPI PFNGLPOPNAMEPROC gload_glPopName;

#define glPushName gload_glPushName
typedef void(APIENTRYP PFNGLPUSHNAMEPROC)(GLuint name);
GLAPI PFNGLPUSHNAMEPROC gload_glPushName;

#define glClearAccum gload_glClearAccum
typedef void(APIENTRYP PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLCLEARACCUMPROC gload_glClearAccum;

#define glClearIndex gload_glClearIndex
typedef void(APIENTRYP PFNGLCLEARINDEXPROC)(GLfloat c);
GLAPI PFNGLCLEARINDEXPROC gload_glClearIndex;

#define glIndexMask gload_glIndexMask
typedef void(APIENTRYP PFNGLINDEXMASKPROC)(GLuint mask);
GLAPI PFNGLINDEXMASKPROC gload_glIndexMask;

#define glAccum gload_glAccum
typedef void(APIENTRYP PFNGLACCUMPROC)(GLenum op, GLfloat value);
GLAPI PFNGLACCUMPROC gload_glAccum;

#define glPopAttrib gload_glPopAttrib
typedef void(APIENTRYP PFNGLPOPATTRIBPROC)(void);
GLAPI PFNGLPOPATTRIBPROC gload_glPopAttrib;

#define glPushAttrib gload_glPushAttrib
typedef void(APIENTRYP PFNGLPUSHATTRIBPROC)(GLbitfield mask);
GLAPI PFNGLPUSHATTRIBPROC gload_glPushAttrib;

#define glMap1d gload_glMap1d
typedef void(APIENTRYP PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
GLAPI PFNGLMAP1DPROC gload_glMap1d;

#define glMap1f gload_glMap1f
typedef void(APIENTRYP PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
GLAPI PFNGLMAP1FPROC gload_glMap1f;

#define glMap2d gload_glMap2d
typedef void(APIENTRYP PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
GLAPI PFNGLMAP2DPROC gload_glMap2d;

#define glMap2f gload_glMap2f
typedef void(APIENTRYP PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
GLAPI PFNGLMAP2FPROC gload_glMap2f;

#define glMapGrid1d gload_glMapGrid1d
typedef void(APIENTRYP PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
GLAPI PFNGLMAPGRID1DPROC gload_glMapGrid1d;

#define glMapGrid1f gload_glMapGrid1f
typedef void(APIENTRYP PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
GLAPI PFNGLMAPGRID1FPROC gload_glMapGrid1f;

#define glMapGrid2d gload_glMapGrid2d
typedef void(APIENTRYP PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
GLAPI PFNGLMAPGRID2DPROC gload_glMapGrid2d;

#define glMapGrid2f gload_glMapGrid2f
typedef void(APIENTRYP PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
GLAPI PFNGLMAPGRID2FPROC gload_glMapGrid2f;

#define glEvalCoord1d gload_glEvalCoord1d
typedef void(APIENTRYP PFNGLEVALCOORD1DPROC)(GLdouble u);
GLAPI PFNGLEVALCOORD1DPROC gload_glEvalCoord1d;

#define glEvalCoord1dv gload_glEvalCoord1dv
typedef void(APIENTRYP PFNGLEVALCOORD1DVPROC)(const GLdouble* u);
GLAPI PFNGLEVALCOORD1DVPROC gload_glEvalCoord1dv;

#define glEvalCoord1f gload_glEvalCoord1f
typedef void(APIENTRYP PFNGLEVALCOORD1FPROC)(GLfloat u);
GLAPI PFNGLEVALCOORD1FPROC gload_glEvalCoord1f;

#define glEvalCoord1fv gload_glEvalCoord1fv
typedef void(APIENTRYP PFNGLEVALCOORD1FVPROC)(const GLfloat* u);
GLAPI PFNGLEVALCOORD1FVPROC gload_glEvalCoord1fv;

#define glEvalCoord2d gload_glEvalCoord2d
typedef void(APIENTRYP PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
GLAPI PFNGLEVALCOORD2DPROC gload_glEvalCoord2d;

#define glEvalCoord2dv gload_glEvalCoord2dv
typedef void(APIENTRYP PFNGLEVALCOORD2DVPROC)(const GLdouble* u);
GLAPI PFNGLEVALCOORD2DVPROC gload_glEvalCoord2dv;

#define glEvalCoord2f gload_glEvalCoord2f
typedef void(APIENTRYP PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
GLAPI PFNGLEVALCOORD2FPROC gload_glEvalCoord2f;

#define glEvalCoord2fv gload_glEvalCoord2fv
typedef void(APIENTRYP PFNGLEVALCOORD2FVPROC)(const GLfloat* u);
GLAPI PFNGLEVALCOORD2FVPROC gload_glEvalCoord2fv;

#define glEvalMesh1 gload_glEvalMesh1
typedef void(APIENTRYP PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
GLAPI PFNGLEVALMESH1PROC gload_glEvalMesh1;

#define glEvalPoint1 gload_glEvalPoint1
typedef void(APIENTRYP PFNGLEVALPOINT1PROC)(GLint i);
GLAPI PFNGLEVALPOINT1PROC gload_glEvalPoint1;

#define glEvalMesh2 gload_glEvalMesh2
typedef void(APIENTRYP PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
GLAPI PFNGLEVALMESH2PROC gload_glEvalMesh2;

#define glEvalPoint2 gload_glEvalPoint2
typedef void(APIENTRYP PFNGLEVALPOINT2PROC)(GLint i, GLint j);
GLAPI PFNGLEVALPOINT2PROC gload_glEvalPoint2;

#define glAlphaFunc gload_glAlphaFunc
typedef void(APIENTRYP PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
GLAPI PFNGLALPHAFUNCPROC gload_glAlphaFunc;

#define glPixelZoom gload_glPixelZoom
typedef void(APIENTRYP PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
GLAPI PFNGLPIXELZOOMPROC gload_glPixelZoom;

#define glPixelTransferf gload_glPixelTransferf
typedef void(APIENTRYP PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPIXELTRANSFERFPROC gload_glPixelTransferf;

#define glPixelTransferi gload_glPixelTransferi
typedef void(APIENTRYP PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
GLAPI PFNGLPIXELTRANSFERIPROC gload_glPixelTransferi;

#define glPixelMapfv gload_glPixelMapfv
typedef void(APIENTRYP PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat* values);
GLAPI PFNGLPIXELMAPFVPROC gload_glPixelMapfv;

#define glPixelMapuiv gload_glPixelMapuiv
typedef void(APIENTRYP PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint* values);
GLAPI PFNGLPIXELMAPUIVPROC gload_glPixelMapuiv;

#define glPixelMapusv gload_glPixelMapusv
typedef void(APIENTRYP PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort* values);
GLAPI PFNGLPIXELMAPUSVPROC gload_glPixelMapusv;

#define glCopyPixels gload_glCopyPixels
typedef void(APIENTRYP PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
GLAPI PFNGLCOPYPIXELSPROC gload_glCopyPixels;

#define glDrawPixels gload_glDrawPixels
typedef void(APIENTRYP PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLDRAWPIXELSPROC gload_glDrawPixels;

#define glGetClipPlane gload_glGetClipPlane
typedef void(APIENTRYP PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble* equation);
GLAPI PFNGLGETCLIPPLANEPROC gload_glGetClipPlane;

#define glGetLightfv gload_glGetLightfv
typedef void(APIENTRYP PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat* params);
GLAPI PFNGLGETLIGHTFVPROC gload_glGetLightfv;

#define glGetLightiv gload_glGetLightiv
typedef void(APIENTRYP PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint* params);
GLAPI PFNGLGETLIGHTIVPROC gload_glGetLightiv;

#define glGetMapdv gload_glGetMapdv
typedef void(APIENTRYP PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble* v);
GLAPI PFNGLGETMAPDVPROC gload_glGetMapdv;

#define glGetMapfv gload_glGetMapfv
typedef void(APIENTRYP PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat* v);
GLAPI PFNGLGETMAPFVPROC gload_glGetMapfv;

#define glGetMapiv gload_glGetMapiv
typedef void(APIENTRYP PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint* v);
GLAPI PFNGLGETMAPIVPROC gload_glGetMapiv;

#define glGetMaterialfv gload_glGetMaterialfv
typedef void(APIENTRYP PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat* params);
GLAPI PFNGLGETMATERIALFVPROC gload_glGetMaterialfv;

#define glGetMaterialiv gload_glGetMaterialiv
typedef void(APIENTRYP PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint* params);
GLAPI PFNGLGETMATERIALIVPROC gload_glGetMaterialiv;

#define glGetPixelMapfv gload_glGetPixelMapfv
typedef void(APIENTRYP PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat* values);
GLAPI PFNGLGETPIXELMAPFVPROC gload_glGetPixelMapfv;

#define glGetPixelMapuiv gload_glGetPixelMapuiv
typedef void(APIENTRYP PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint* values);
GLAPI PFNGLGETPIXELMAPUIVPROC gload_glGetPixelMapuiv;

#define glGetPixelMapusv gload_glGetPixelMapusv
typedef void(APIENTRYP PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort* values);
GLAPI PFNGLGETPIXELMAPUSVPROC gload_glGetPixelMapusv;

#define glGetPolygonStipple gload_glGetPolygonStipple
typedef void(APIENTRYP PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte* mask);
GLAPI PFNGLGETPOLYGONSTIPPLEPROC gload_glGetPolygonStipple;

#define glGetTexEnvfv gload_glGetTexEnvfv
typedef void(APIENTRYP PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXENVFVPROC gload_glGetTexEnvfv;

#define glGetTexEnviv gload_glGetTexEnviv
typedef void(APIENTRYP PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXENVIVPROC gload_glGetTexEnviv;

#define glGetTexGendv gload_glGetTexGendv
typedef void(APIENTRYP PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble* params);
GLAPI PFNGLGETTEXGENDVPROC gload_glGetTexGendv;

#define glGetTexGenfv gload_glGetTexGenfv
typedef void(APIENTRYP PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXGENFVPROC gload_glGetTexGenfv;

#define glGetTexGeniv gload_glGetTexGeniv
typedef void(APIENTRYP PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXGENIVPROC gload_glGetTexGeniv;

#define glIsList gload_glIsList
typedef GLboolean(APIENTRYP PFNGLISLISTPROC)(GLuint list);
GLAPI PFNGLISLISTPROC gload_glIsList;

#define glFrustum gload_glFrustum
typedef void(APIENTRYP PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLAPI PFNGLFRUSTUMPROC gload_glFrustum;

#define glLoadIdentity gload_glLoadIdentity
typedef void(APIENTRYP PFNGLLOADIDENTITYPROC)(void);
GLAPI PFNGLLOADIDENTITYPROC gload_glLoadIdentity;

#define glLoadMatrixf gload_glLoadMatrixf
typedef void(APIENTRYP PFNGLLOADMATRIXFPROC)(const GLfloat* m);
GLAPI PFNGLLOADMATRIXFPROC gload_glLoadMatrixf;

#define glLoadMatrixd gload_glLoadMatrixd
typedef void(APIENTRYP PFNGLLOADMATRIXDPROC)(const GLdouble* m);
GLAPI PFNGLLOADMATRIXDPROC gload_glLoadMatrixd;

#define glMatrixMode gload_glMatrixMode
typedef void(APIENTRYP PFNGLMATRIXMODEPROC)(GLenum mode);
GLAPI PFNGLMATRIXMODEPROC gload_glMatrixMode;

#define glMultMatrixf gload_glMultMatrixf
typedef void(APIENTRYP PFNGLMULTMATRIXFPROC)(const GLfloat* m);
GLAPI PFNGLMULTMATRIXFPROC gload_glMultMatrixf;

#define glMultMatrixd gload_glMultMatrixd
typedef void(APIENTRYP PFNGLMULTMATRIXDPROC)(const GLdouble* m);
GLAPI PFNGLMULTMATRIXDPROC gload_glMultMatrixd;

#define glOrtho gload_glOrtho
typedef void(APIENTRYP PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLAPI PFNGLORTHOPROC gload_glOrtho;

#define glPopMatrix gload_glPopMatrix
typedef void(APIENTRYP PFNGLPOPMATRIXPROC)(void);
GLAPI PFNGLPOPMATRIXPROC gload_glPopMatrix;

#define glPushMatrix gload_glPushMatrix
typedef void(APIENTRYP PFNGLPUSHMATRIXPROC)(void);
GLAPI PFNGLPUSHMATRIXPROC gload_glPushMatrix;

#define glRotated gload_glRotated
typedef void(APIENTRYP PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLROTATEDPROC gload_glRotated;

#define glRotatef gload_glRotatef
typedef void(APIENTRYP PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLROTATEFPROC gload_glRotatef;

#define glScaled gload_glScaled
typedef void(APIENTRYP PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLSCALEDPROC gload_glScaled;

#define glScalef gload_glScalef
typedef void(APIENTRYP PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLSCALEFPROC gload_glScalef;

#define glTranslated gload_glTranslated
typedef void(APIENTRYP PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLTRANSLATEDPROC gload_glTranslated;

#define glTranslatef gload_glTranslatef
typedef void(APIENTRYP PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLTRANSLATEFPROC gload_glTranslatef;

/***** OpenGL 1.1 *****/
#define GL_VERSION_1_1
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_DOUBLE 0x140A
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_R3_G3_B2 0x2A10
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB8 0x8051
#define GL_RGB10 0x8052
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGBA8 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_VERTEX_ARRAY 0x8074
#define GL_NORMAL_ARRAY 0x8075
#define GL_COLOR_ARRAY 0x8076
#define GL_INDEX_ARRAY 0x8077
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_ALPHA4 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA12 0x803D
#define GL_ALPHA16 0x803E
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_INTENSITY 0x8049
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY16 0x804D
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_C3F_V3F 0x2A24
#define GL_N3F_V3F 0x2A25
#define GL_C4F_N3F_V3F 0x2A26
#define GL_T2F_V3F 0x2A27
#define GL_T4F_V4F 0x2A28
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define glDrawArrays gload_glDrawArrays
typedef void(APIENTRYP PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
GLAPI PFNGLDRAWARRAYSPROC gload_glDrawArrays;

#define glDrawElements gload_glDrawElements
typedef void(APIENTRYP PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices);
GLAPI PFNGLDRAWELEMENTSPROC gload_glDrawElements;

#define glGetPointerv gload_glGetPointerv
typedef void(APIENTRYP PFNGLGETPOINTERVPROC)(GLenum pname, void** params);
GLAPI PFNGLGETPOINTERVPROC gload_glGetPointerv;

#define glPolygonOffset gload_glPolygonOffset
typedef void(APIENTRYP PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
GLAPI PFNGLPOLYGONOFFSETPROC gload_glPolygonOffset;

#define glCopyTexImage1D gload_glCopyTexImage1D
typedef void(APIENTRYP PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI PFNGLCOPYTEXIMAGE1DPROC gload_glCopyTexImage1D;

#define glCopyTexImage2D gload_glCopyTexImage2D
typedef void(APIENTRYP PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI PFNGLCOPYTEXIMAGE2DPROC gload_glCopyTexImage2D;

#define glCopyTexSubImage1D gload_glCopyTexSubImage1D
typedef void(APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYTEXSUBIMAGE1DPROC gload_glCopyTexSubImage1D;

#define glCopyTexSubImage2D gload_glCopyTexSubImage2D
typedef void(APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXSUBIMAGE2DPROC gload_glCopyTexSubImage2D;

#define glTexSubImage1D gload_glTexSubImage1D
typedef void(APIENTRYP PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXSUBIMAGE1DPROC gload_glTexSubImage1D;

#define glTexSubImage2D gload_glTexSubImage2D
typedef void(APIENTRYP PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXSUBIMAGE2DPROC gload_glTexSubImage2D;

#define glBindTexture gload_glBindTexture
typedef void(APIENTRYP PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
GLAPI PFNGLBINDTEXTUREPROC gload_glBindTexture;

#define glDeleteTextures gload_glDeleteTextures
typedef void(APIENTRYP PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint* textures);
GLAPI PFNGLDELETETEXTURESPROC gload_glDeleteTextures;

#define glGenTextures gload_glGenTextures
typedef void(APIENTRYP PFNGLGENTEXTURESPROC)(GLsizei n, GLuint* textures);
GLAPI PFNGLGENTEXTURESPROC gload_glGenTextures;

#define glIsTexture gload_glIsTexture
typedef GLboolean(APIENTRYP PFNGLISTEXTUREPROC)(GLuint texture);
GLAPI PFNGLISTEXTUREPROC gload_glIsTexture;

#define glArrayElement gload_glArrayElement
typedef void(APIENTRYP PFNGLARRAYELEMENTPROC)(GLint i);
GLAPI PFNGLARRAYELEMENTPROC gload_glArrayElement;

#define glColorPointer gload_glColorPointer
typedef void(APIENTRYP PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLCOLORPOINTERPROC gload_glColorPointer;

#define glDisableClientState gload_glDisableClientState
typedef void(APIENTRYP PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
GLAPI PFNGLDISABLECLIENTSTATEPROC gload_glDisableClientState;

#define glEdgeFlagPointer gload_glEdgeFlagPointer
typedef void(APIENTRYP PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void* pointer);
GLAPI PFNGLEDGEFLAGPOINTERPROC gload_glEdgeFlagPointer;

#define glEnableClientState gload_glEnableClientState
typedef void(APIENTRYP PFNGLENABLECLIENTSTATEPROC)(GLenum array);
GLAPI PFNGLENABLECLIENTSTATEPROC gload_glEnableClientState;

#define glIndexPointer gload_glIndexPointer
typedef void(APIENTRYP PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLINDEXPOINTERPROC gload_glIndexPointer;

#define glInterleavedArrays gload_glInterleavedArrays
typedef void(APIENTRYP PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void* pointer);
GLAPI PFNGLINTERLEAVEDARRAYSPROC gload_glInterleavedArrays;

#define glNormalPointer gload_glNormalPointer
typedef void(APIENTRYP PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLNORMALPOINTERPROC gload_glNormalPointer;

#define glTexCoordPointer gload_glTexCoordPointer
typedef void(APIENTRYP PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLTEXCOORDPOINTERPROC gload_glTexCoordPointer;

#define glVertexPointer gload_glVertexPointer
typedef void(APIENTRYP PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLVERTEXPOINTERPROC gload_glVertexPointer;

#define glAreTexturesResident gload_glAreTexturesResident
typedef GLboolean(APIENTRYP PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint* textures, GLboolean* residences);
GLAPI PFNGLARETEXTURESRESIDENTPROC gload_glAreTexturesResident;

#define glPrioritizeTextures gload_glPrioritizeTextures
typedef void(APIENTRYP PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint* textures, const GLfloat* priorities);
GLAPI PFNGLPRIORITIZETEXTURESPROC gload_glPrioritizeTextures;

#define glIndexub gload_glIndexub
typedef void(APIENTRYP PFNGLINDEXUBPROC)(GLubyte c);
GLAPI PFNGLINDEXUBPROC gload_glIndexub;

#define glIndexubv gload_glIndexubv
typedef void(APIENTRYP PFNGLINDEXUBVPROC)(const GLubyte* c);
GLAPI PFNGLINDEXUBVPROC gload_glIndexubv;

#define glPopClientAttrib gload_glPopClientAttrib
typedef void(APIENTRYP PFNGLPOPCLIENTATTRIBPROC)(void);
GLAPI PFNGLPOPCLIENTATTRIBPROC gload_glPopClientAttrib;

#define glPushClientAttrib gload_glPushClientAttrib
typedef void(APIENTRYP PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);
GLAPI PFNGLPUSHCLIENTATTRIBPROC gload_glPushClientAttrib;

#ifdef GLOAD_IMPLEMENTATION
PFNGLCULLFACEPROC		gload_glCullFace;
PFNGLFRONTFACEPROC		gload_glFrontFace;
PFNGLHINTPROC			gload_glHint;
PFNGLLINEWIDTHPROC		gload_glLineWidth;
PFNGLPOINTSIZEPROC		gload_glPointSize;
PFNGLPOLYGONMODEPROC		gload_glPolygonMode;
PFNGLSCISSORPROC		gload_glScissor;
PFNGLTEXPARAMETERFPROC		gload_glTexParameterf;
PFNGLTEXPARAMETERFVPROC		gload_glTexParameterfv;
PFNGLTEXPARAMETERIPROC		gload_glTexParameteri;
PFNGLTEXPARAMETERIVPROC		gload_glTexParameteriv;
PFNGLTEXIMAGE1DPROC		gload_glTexImage1D;
PFNGLTEXIMAGE2DPROC		gload_glTexImage2D;
PFNGLDRAWBUFFERPROC		gload_glDrawBuffer;
PFNGLCLEARPROC			gload_glClear;
PFNGLCLEARCOLORPROC		gload_glClearColor;
PFNGLCLEARSTENCILPROC		gload_glClearStencil;
PFNGLCLEARDEPTHPROC		gload_glClearDepth;
PFNGLSTENCILMASKPROC		gload_glStencilMask;
PFNGLCOLORMASKPROC		gload_glColorMask;
PFNGLDEPTHMASKPROC		gload_glDepthMask;
PFNGLDISABLEPROC		gload_glDisable;
PFNGLENABLEPROC			gload_glEnable;
PFNGLFINISHPROC			gload_glFinish;
PFNGLFLUSHPROC			gload_glFlush;
PFNGLBLENDFUNCPROC		gload_glBlendFunc;
PFNGLLOGICOPPROC		gload_glLogicOp;
PFNGLSTENCILFUNCPROC		gload_glStencilFunc;
PFNGLSTENCILOPPROC		gload_glStencilOp;
PFNGLDEPTHFUNCPROC		gload_glDepthFunc;
PFNGLPIXELSTOREFPROC		gload_glPixelStoref;
PFNGLPIXELSTOREIPROC		gload_glPixelStorei;
PFNGLREADBUFFERPROC		gload_glReadBuffer;
PFNGLREADPIXELSPROC		gload_glReadPixels;
PFNGLGETBOOLEANVPROC		gload_glGetBooleanv;
PFNGLGETDOUBLEVPROC		gload_glGetDoublev;
PFNGLGETERRORPROC		gload_glGetError;
PFNGLGETFLOATVPROC		gload_glGetFloatv;
PFNGLGETINTEGERVPROC		gload_glGetIntegerv;
PFNGLGETSTRINGPROC		gload_glGetString;
PFNGLGETTEXIMAGEPROC		gload_glGetTexImage;
PFNGLGETTEXPARAMETERFVPROC	gload_glGetTexParameterfv;
PFNGLGETTEXPARAMETERIVPROC	gload_glGetTexParameteriv;
PFNGLGETTEXLEVELPARAMETERFVPROC gload_glGetTexLevelParameterfv;
PFNGLGETTEXLEVELPARAMETERIVPROC gload_glGetTexLevelParameteriv;
PFNGLISENABLEDPROC		gload_glIsEnabled;
PFNGLDEPTHRANGEPROC		gload_glDepthRange;
PFNGLVIEWPORTPROC		gload_glViewport;
PFNGLNEWLISTPROC		gload_glNewList;
PFNGLENDLISTPROC		gload_glEndList;
PFNGLCALLLISTPROC		gload_glCallList;
PFNGLCALLLISTSPROC		gload_glCallLists;
PFNGLDELETELISTSPROC		gload_glDeleteLists;
PFNGLGENLISTSPROC		gload_glGenLists;
PFNGLLISTBASEPROC		gload_glListBase;
PFNGLBEGINPROC			gload_glBegin;
PFNGLBITMAPPROC			gload_glBitmap;
PFNGLCOLOR3BPROC		gload_glColor3b;
PFNGLCOLOR3BVPROC		gload_glColor3bv;
PFNGLCOLOR3DPROC		gload_glColor3d;
PFNGLCOLOR3DVPROC		gload_glColor3dv;
PFNGLCOLOR3FPROC		gload_glColor3f;
PFNGLCOLOR3FVPROC		gload_glColor3fv;
PFNGLCOLOR3IPROC		gload_glColor3i;
PFNGLCOLOR3IVPROC		gload_glColor3iv;
PFNGLCOLOR3SPROC		gload_glColor3s;
PFNGLCOLOR3SVPROC		gload_glColor3sv;
PFNGLCOLOR3UBPROC		gload_glColor3ub;
PFNGLCOLOR3UBVPROC		gload_glColor3ubv;
PFNGLCOLOR3UIPROC		gload_glColor3ui;
PFNGLCOLOR3UIVPROC		gload_glColor3uiv;
PFNGLCOLOR3USPROC		gload_glColor3us;
PFNGLCOLOR3USVPROC		gload_glColor3usv;
PFNGLCOLOR4BPROC		gload_glColor4b;
PFNGLCOLOR4BVPROC		gload_glColor4bv;
PFNGLCOLOR4DPROC		gload_glColor4d;
PFNGLCOLOR4DVPROC		gload_glColor4dv;
PFNGLCOLOR4FPROC		gload_glColor4f;
PFNGLCOLOR4FVPROC		gload_glColor4fv;
PFNGLCOLOR4IPROC		gload_glColor4i;
PFNGLCOLOR4IVPROC		gload_glColor4iv;
PFNGLCOLOR4SPROC		gload_glColor4s;
PFNGLCOLOR4SVPROC		gload_glColor4sv;
PFNGLCOLOR4UBPROC		gload_glColor4ub;
PFNGLCOLOR4UBVPROC		gload_glColor4ubv;
PFNGLCOLOR4UIPROC		gload_glColor4ui;
PFNGLCOLOR4UIVPROC		gload_glColor4uiv;
PFNGLCOLOR4USPROC		gload_glColor4us;
PFNGLCOLOR4USVPROC		gload_glColor4usv;
PFNGLEDGEFLAGPROC		gload_glEdgeFlag;
PFNGLEDGEFLAGVPROC		gload_glEdgeFlagv;
PFNGLENDPROC			gload_glEnd;
PFNGLINDEXDPROC			gload_glIndexd;
PFNGLINDEXDVPROC		gload_glIndexdv;
PFNGLINDEXFPROC			gload_glIndexf;
PFNGLINDEXFVPROC		gload_glIndexfv;
PFNGLINDEXIPROC			gload_glIndexi;
PFNGLINDEXIVPROC		gload_glIndexiv;
PFNGLINDEXSPROC			gload_glIndexs;
PFNGLINDEXSVPROC		gload_glIndexsv;
PFNGLNORMAL3BPROC		gload_glNormal3b;
PFNGLNORMAL3BVPROC		gload_glNormal3bv;
PFNGLNORMAL3DPROC		gload_glNormal3d;
PFNGLNORMAL3DVPROC		gload_glNormal3dv;
PFNGLNORMAL3FPROC		gload_glNormal3f;
PFNGLNORMAL3FVPROC		gload_glNormal3fv;
PFNGLNORMAL3IPROC		gload_glNormal3i;
PFNGLNORMAL3IVPROC		gload_glNormal3iv;
PFNGLNORMAL3SPROC		gload_glNormal3s;
PFNGLNORMAL3SVPROC		gload_glNormal3sv;
PFNGLRASTERPOS2DPROC		gload_glRasterPos2d;
PFNGLRASTERPOS2DVPROC		gload_glRasterPos2dv;
PFNGLRASTERPOS2FPROC		gload_glRasterPos2f;
PFNGLRASTERPOS2FVPROC		gload_glRasterPos2fv;
PFNGLRASTERPOS2IPROC		gload_glRasterPos2i;
PFNGLRASTERPOS2IVPROC		gload_glRasterPos2iv;
PFNGLRASTERPOS2SPROC		gload_glRasterPos2s;
PFNGLRASTERPOS2SVPROC		gload_glRasterPos2sv;
PFNGLRASTERPOS3DPROC		gload_glRasterPos3d;
PFNGLRASTERPOS3DVPROC		gload_glRasterPos3dv;
PFNGLRASTERPOS3FPROC		gload_glRasterPos3f;
PFNGLRASTERPOS3FVPROC		gload_glRasterPos3fv;
PFNGLRASTERPOS3IPROC		gload_glRasterPos3i;
PFNGLRASTERPOS3IVPROC		gload_glRasterPos3iv;
PFNGLRASTERPOS3SPROC		gload_glRasterPos3s;
PFNGLRASTERPOS3SVPROC		gload_glRasterPos3sv;
PFNGLRASTERPOS4DPROC		gload_glRasterPos4d;
PFNGLRASTERPOS4DVPROC		gload_glRasterPos4dv;
PFNGLRASTERPOS4FPROC		gload_glRasterPos4f;
PFNGLRASTERPOS4FVPROC		gload_glRasterPos4fv;
PFNGLRASTERPOS4IPROC		gload_glRasterPos4i;
PFNGLRASTERPOS4IVPROC		gload_glRasterPos4iv;
PFNGLRASTERPOS4SPROC		gload_glRasterPos4s;
PFNGLRASTERPOS4SVPROC		gload_glRasterPos4sv;
PFNGLRECTDPROC			gload_glRectd;
PFNGLRECTDVPROC			gload_glRectdv;
PFNGLRECTFPROC			gload_glRectf;
PFNGLRECTFVPROC			gload_glRectfv;
PFNGLRECTIPROC			gload_glRecti;
PFNGLRECTIVPROC			gload_glRectiv;
PFNGLRECTSPROC			gload_glRects;
PFNGLRECTSVPROC			gload_glRectsv;
PFNGLTEXCOORD1DPROC		gload_glTexCoord1d;
PFNGLTEXCOORD1DVPROC		gload_glTexCoord1dv;
PFNGLTEXCOORD1FPROC		gload_glTexCoord1f;
PFNGLTEXCOORD1FVPROC		gload_glTexCoord1fv;
PFNGLTEXCOORD1IPROC		gload_glTexCoord1i;
PFNGLTEXCOORD1IVPROC		gload_glTexCoord1iv;
PFNGLTEXCOORD1SPROC		gload_glTexCoord1s;
PFNGLTEXCOORD1SVPROC		gload_glTexCoord1sv;
PFNGLTEXCOORD2DPROC		gload_glTexCoord2d;
PFNGLTEXCOORD2DVPROC		gload_glTexCoord2dv;
PFNGLTEXCOORD2FPROC		gload_glTexCoord2f;
PFNGLTEXCOORD2FVPROC		gload_glTexCoord2fv;
PFNGLTEXCOORD2IPROC		gload_glTexCoord2i;
PFNGLTEXCOORD2IVPROC		gload_glTexCoord2iv;
PFNGLTEXCOORD2SPROC		gload_glTexCoord2s;
PFNGLTEXCOORD2SVPROC		gload_glTexCoord2sv;
PFNGLTEXCOORD3DPROC		gload_glTexCoord3d;
PFNGLTEXCOORD3DVPROC		gload_glTexCoord3dv;
PFNGLTEXCOORD3FPROC		gload_glTexCoord3f;
PFNGLTEXCOORD3FVPROC		gload_glTexCoord3fv;
PFNGLTEXCOORD3IPROC		gload_glTexCoord3i;
PFNGLTEXCOORD3IVPROC		gload_glTexCoord3iv;
PFNGLTEXCOORD3SPROC		gload_glTexCoord3s;
PFNGLTEXCOORD3SVPROC		gload_glTexCoord3sv;
PFNGLTEXCOORD4DPROC		gload_glTexCoord4d;
PFNGLTEXCOORD4DVPROC		gload_glTexCoord4dv;
PFNGLTEXCOORD4FPROC		gload_glTexCoord4f;
PFNGLTEXCOORD4FVPROC		gload_glTexCoord4fv;
PFNGLTEXCOORD4IPROC		gload_glTexCoord4i;
PFNGLTEXCOORD4IVPROC		gload_glTexCoord4iv;
PFNGLTEXCOORD4SPROC		gload_glTexCoord4s;
PFNGLTEXCOORD4SVPROC		gload_glTexCoord4sv;
PFNGLVERTEX2DPROC		gload_glVertex2d;
PFNGLVERTEX2DVPROC		gload_glVertex2dv;
PFNGLVERTEX2FPROC		gload_glVertex2f;
PFNGLVERTEX2FVPROC		gload_glVertex2fv;
PFNGLVERTEX2IPROC		gload_glVertex2i;
PFNGLVERTEX2IVPROC		gload_glVertex2iv;
PFNGLVERTEX2SPROC		gload_glVertex2s;
PFNGLVERTEX2SVPROC		gload_glVertex2sv;
PFNGLVERTEX3DPROC		gload_glVertex3d;
PFNGLVERTEX3DVPROC		gload_glVertex3dv;
PFNGLVERTEX3FPROC		gload_glVertex3f;
PFNGLVERTEX3FVPROC		gload_glVertex3fv;
PFNGLVERTEX3IPROC		gload_glVertex3i;
PFNGLVERTEX3IVPROC		gload_glVertex3iv;
PFNGLVERTEX3SPROC		gload_glVertex3s;
PFNGLVERTEX3SVPROC		gload_glVertex3sv;
PFNGLVERTEX4DPROC		gload_glVertex4d;
PFNGLVERTEX4DVPROC		gload_glVertex4dv;
PFNGLVERTEX4FPROC		gload_glVertex4f;
PFNGLVERTEX4FVPROC		gload_glVertex4fv;
PFNGLVERTEX4IPROC		gload_glVertex4i;
PFNGLVERTEX4IVPROC		gload_glVertex4iv;
PFNGLVERTEX4SPROC		gload_glVertex4s;
PFNGLVERTEX4SVPROC		gload_glVertex4sv;
PFNGLCLIPPLANEPROC		gload_glClipPlane;
PFNGLCOLORMATERIALPROC		gload_glColorMaterial;
PFNGLFOGFPROC			gload_glFogf;
PFNGLFOGFVPROC			gload_glFogfv;
PFNGLFOGIPROC			gload_glFogi;
PFNGLFOGIVPROC			gload_glFogiv;
PFNGLLIGHTFPROC			gload_glLightf;
PFNGLLIGHTFVPROC		gload_glLightfv;
PFNGLLIGHTIPROC			gload_glLighti;
PFNGLLIGHTIVPROC		gload_glLightiv;
PFNGLLIGHTMODELFPROC		gload_glLightModelf;
PFNGLLIGHTMODELFVPROC		gload_glLightModelfv;
PFNGLLIGHTMODELIPROC		gload_glLightModeli;
PFNGLLIGHTMODELIVPROC		gload_glLightModeliv;
PFNGLLINESTIPPLEPROC		gload_glLineStipple;
PFNGLMATERIALFPROC		gload_glMaterialf;
PFNGLMATERIALFVPROC		gload_glMaterialfv;
PFNGLMATERIALIPROC		gload_glMateriali;
PFNGLMATERIALIVPROC		gload_glMaterialiv;
PFNGLPOLYGONSTIPPLEPROC		gload_glPolygonStipple;
PFNGLSHADEMODELPROC		gload_glShadeModel;
PFNGLTEXENVFPROC		gload_glTexEnvf;
PFNGLTEXENVFVPROC		gload_glTexEnvfv;
PFNGLTEXENVIPROC		gload_glTexEnvi;
PFNGLTEXENVIVPROC		gload_glTexEnviv;
PFNGLTEXGENDPROC		gload_glTexGend;
PFNGLTEXGENDVPROC		gload_glTexGendv;
PFNGLTEXGENFPROC		gload_glTexGenf;
PFNGLTEXGENFVPROC		gload_glTexGenfv;
PFNGLTEXGENIPROC		gload_glTexGeni;
PFNGLTEXGENIVPROC		gload_glTexGeniv;
PFNGLFEEDBACKBUFFERPROC		gload_glFeedbackBuffer;
PFNGLSELECTBUFFERPROC		gload_glSelectBuffer;
PFNGLRENDERMODEPROC		gload_glRenderMode;
PFNGLINITNAMESPROC		gload_glInitNames;
PFNGLLOADNAMEPROC		gload_glLoadName;
PFNGLPASSTHROUGHPROC		gload_glPassThrough;
PFNGLPOPNAMEPROC		gload_glPopName;
PFNGLPUSHNAMEPROC		gload_glPushName;
PFNGLCLEARACCUMPROC		gload_glClearAccum;
PFNGLCLEARINDEXPROC		gload_glClearIndex;
PFNGLINDEXMASKPROC		gload_glIndexMask;
PFNGLACCUMPROC			gload_glAccum;
PFNGLPOPATTRIBPROC		gload_glPopAttrib;
PFNGLPUSHATTRIBPROC		gload_glPushAttrib;
PFNGLMAP1DPROC			gload_glMap1d;
PFNGLMAP1FPROC			gload_glMap1f;
PFNGLMAP2DPROC			gload_glMap2d;
PFNGLMAP2FPROC			gload_glMap2f;
PFNGLMAPGRID1DPROC		gload_glMapGrid1d;
PFNGLMAPGRID1FPROC		gload_glMapGrid1f;
PFNGLMAPGRID2DPROC		gload_glMapGrid2d;
PFNGLMAPGRID2FPROC		gload_glMapGrid2f;
PFNGLEVALCOORD1DPROC		gload_glEvalCoord1d;
PFNGLEVALCOORD1DVPROC		gload_glEvalCoord1dv;
PFNGLEVALCOORD1FPROC		gload_glEvalCoord1f;
PFNGLEVALCOORD1FVPROC		gload_glEvalCoord1fv;
PFNGLEVALCOORD2DPROC		gload_glEvalCoord2d;
PFNGLEVALCOORD2DVPROC		gload_glEvalCoord2dv;
PFNGLEVALCOORD2FPROC		gload_glEvalCoord2f;
PFNGLEVALCOORD2FVPROC		gload_glEvalCoord2fv;
PFNGLEVALMESH1PROC		gload_glEvalMesh1;
PFNGLEVALPOINT1PROC		gload_glEvalPoint1;
PFNGLEVALMESH2PROC		gload_glEvalMesh2;
PFNGLEVALPOINT2PROC		gload_glEvalPoint2;
PFNGLALPHAFUNCPROC		gload_glAlphaFunc;
PFNGLPIXELZOOMPROC		gload_glPixelZoom;
PFNGLPIXELTRANSFERFPROC		gload_glPixelTransferf;
PFNGLPIXELTRANSFERIPROC		gload_glPixelTransferi;
PFNGLPIXELMAPFVPROC		gload_glPixelMapfv;
PFNGLPIXELMAPUIVPROC		gload_glPixelMapuiv;
PFNGLPIXELMAPUSVPROC		gload_glPixelMapusv;
PFNGLCOPYPIXELSPROC		gload_glCopyPixels;
PFNGLDRAWPIXELSPROC		gload_glDrawPixels;
PFNGLGETCLIPPLANEPROC		gload_glGetClipPlane;
PFNGLGETLIGHTFVPROC		gload_glGetLightfv;
PFNGLGETLIGHTIVPROC		gload_glGetLightiv;
PFNGLGETMAPDVPROC		gload_glGetMapdv;
PFNGLGETMAPFVPROC		gload_glGetMapfv;
PFNGLGETMAPIVPROC		gload_glGetMapiv;
PFNGLGETMATERIALFVPROC		gload_glGetMaterialfv;
PFNGLGETMATERIALIVPROC		gload_glGetMaterialiv;
PFNGLGETPIXELMAPFVPROC		gload_glGetPixelMapfv;
PFNGLGETPIXELMAPUIVPROC		gload_glGetPixelMapuiv;
PFNGLGETPIXELMAPUSVPROC		gload_glGetPixelMapusv;
PFNGLGETPOLYGONSTIPPLEPROC	gload_glGetPolygonStipple;
PFNGLGETTEXENVFVPROC		gload_glGetTexEnvfv;
PFNGLGETTEXENVIVPROC		gload_glGetTexEnviv;
PFNGLGETTEXGENDVPROC		gload_glGetTexGendv;
PFNGLGETTEXGENFVPROC		gload_glGetTexGenfv;
PFNGLGETTEXGENIVPROC		gload_glGetTexGeniv;
PFNGLISLISTPROC			gload_glIsList;
PFNGLFRUSTUMPROC		gload_glFrustum;
PFNGLLOADIDENTITYPROC		gload_glLoadIdentity;
PFNGLLOADMATRIXFPROC		gload_glLoadMatrixf;
PFNGLLOADMATRIXDPROC		gload_glLoadMatrixd;
PFNGLMATRIXMODEPROC		gload_glMatrixMode;
PFNGLMULTMATRIXFPROC		gload_glMultMatrixf;
PFNGLMULTMATRIXDPROC		gload_glMultMatrixd;
PFNGLORTHOPROC			gload_glOrtho;
PFNGLPOPMATRIXPROC		gload_glPopMatrix;
PFNGLPUSHMATRIXPROC		gload_glPushMatrix;
PFNGLROTATEDPROC		gload_glRotated;
PFNGLROTATEFPROC		gload_glRotatef;
PFNGLSCALEDPROC			gload_glScaled;
PFNGLSCALEFPROC			gload_glScalef;
PFNGLTRANSLATEDPROC		gload_glTranslated;
PFNGLTRANSLATEFPROC		gload_glTranslatef;
PFNGLDRAWARRAYSPROC		gload_glDrawArrays;
PFNGLDRAWELEMENTSPROC		gload_glDrawElements;
PFNGLGETPOINTERVPROC		gload_glGetPointerv;
PFNGLPOLYGONOFFSETPROC		gload_glPolygonOffset;
PFNGLCOPYTEXIMAGE1DPROC		gload_glCopyTexImage1D;
PFNGLCOPYTEXIMAGE2DPROC		gload_glCopyTexImage2D;
PFNGLCOPYTEXSUBIMAGE1DPROC	gload_glCopyTexSubImage1D;
PFNGLCOPYTEXSUBIMAGE2DPROC	gload_glCopyTexSubImage2D;
PFNGLTEXSUBIMAGE1DPROC		gload_glTexSubImage1D;
PFNGLTEXSUBIMAGE2DPROC		gload_glTexSubImage2D;
PFNGLBINDTEXTUREPROC		gload_glBindTexture;
PFNGLDELETETEXTURESPROC		gload_glDeleteTextures;
PFNGLGENTEXTURESPROC		gload_glGenTextures;
PFNGLISTEXTUREPROC		gload_glIsTexture;
PFNGLARRAYELEMENTPROC		gload_glArrayElement;
PFNGLCOLORPOINTERPROC		gload_glColorPointer;
PFNGLDISABLECLIENTSTATEPROC	gload_glDisableClientState;
PFNGLEDGEFLAGPOINTERPROC	gload_glEdgeFlagPointer;
PFNGLENABLECLIENTSTATEPROC	gload_glEnableClientState;
PFNGLINDEXPOINTERPROC		gload_glIndexPointer;
PFNGLINTERLEAVEDARRAYSPROC	gload_glInterleavedArrays;
PFNGLNORMALPOINTERPROC		gload_glNormalPointer;
PFNGLTEXCOORDPOINTERPROC	gload_glTexCoordPointer;
PFNGLVERTEXPOINTERPROC		gload_glVertexPointer;
PFNGLARETEXTURESRESIDENTPROC	gload_glAreTexturesResident;
PFNGLPRIORITIZETEXTURESPROC	gload_glPrioritizeTextures;
PFNGLINDEXUBPROC		gload_glIndexub;
PFNGLINDEXUBVPROC		gload_glIndexubv;
PFNGLPOPCLIENTATTRIBPROC	gload_glPopClientAttrib;
PFNGLPUSHCLIENTATTRIBPROC	gload_glPushClientAttrib;

#include <stddef.h>
#ifdef _WIN32
#include <windows.h>
#else
#include <dlfcn.h>
#endif
static void* gload_gl = NULL;

void* gload_load(const char* name) {
#ifdef _WIN32
	return GetProcAddress(gload_gl, name);
#else
	return dlsym(gload_gl, name);
#endif
}

void gload_init(void) {
#ifdef _WIN32
	const char* names[] = {"opengl32.dll"};
#elif defined(__APPLE__)
	const char* names[] = {"../Frameworks/OpenGL.framework/OpenGL", "/Library/Frameworks/OpenGL.framework/OpenGL", "/System/Library/Frameworks/OpenGL.framework/OpenGL", "/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL"};
#elif defined(__OpenBSD__)
	const char* names[] = {"libGL.so", "/usr/X11R6/lib/libGL.so"};
#elif defined(__NetBSD__)
	const char* names[] = {"libGL.so", "/usr/X11R7/lib/libGL.so"};
#else
	const char* names[] = {"libGL.so", "/usr/local/lib/libGL.so", "/usr/X11/lib/libGL.so"};
#endif
	int i;
	if(gload_gl != NULL) return;
	for(i = 0; i < sizeof(names) / sizeof(names[0]); i++) {
#ifdef _WIN32
		gload_gl = LoadLibraryA(names[i]);
#else
		gload_gl = dlopen(names[i], RTLD_LAZY);
#endif
		if(gload_gl != NULL) break;
	}
	if(gload_gl == NULL) return;
	gload_glCullFace	       = (PFNGLCULLFACEPROC)gload_load("glCullFace");
	gload_glFrontFace	       = (PFNGLFRONTFACEPROC)gload_load("glFrontFace");
	gload_glHint		       = (PFNGLHINTPROC)gload_load("glHint");
	gload_glLineWidth	       = (PFNGLLINEWIDTHPROC)gload_load("glLineWidth");
	gload_glPointSize	       = (PFNGLPOINTSIZEPROC)gload_load("glPointSize");
	gload_glPolygonMode	       = (PFNGLPOLYGONMODEPROC)gload_load("glPolygonMode");
	gload_glScissor		       = (PFNGLSCISSORPROC)gload_load("glScissor");
	gload_glTexParameterf	       = (PFNGLTEXPARAMETERFPROC)gload_load("glTexParameterf");
	gload_glTexParameterfv	       = (PFNGLTEXPARAMETERFVPROC)gload_load("glTexParameterfv");
	gload_glTexParameteri	       = (PFNGLTEXPARAMETERIPROC)gload_load("glTexParameteri");
	gload_glTexParameteriv	       = (PFNGLTEXPARAMETERIVPROC)gload_load("glTexParameteriv");
	gload_glTexImage1D	       = (PFNGLTEXIMAGE1DPROC)gload_load("glTexImage1D");
	gload_glTexImage2D	       = (PFNGLTEXIMAGE2DPROC)gload_load("glTexImage2D");
	gload_glDrawBuffer	       = (PFNGLDRAWBUFFERPROC)gload_load("glDrawBuffer");
	gload_glClear		       = (PFNGLCLEARPROC)gload_load("glClear");
	gload_glClearColor	       = (PFNGLCLEARCOLORPROC)gload_load("glClearColor");
	gload_glClearStencil	       = (PFNGLCLEARSTENCILPROC)gload_load("glClearStencil");
	gload_glClearDepth	       = (PFNGLCLEARDEPTHPROC)gload_load("glClearDepth");
	gload_glStencilMask	       = (PFNGLSTENCILMASKPROC)gload_load("glStencilMask");
	gload_glColorMask	       = (PFNGLCOLORMASKPROC)gload_load("glColorMask");
	gload_glDepthMask	       = (PFNGLDEPTHMASKPROC)gload_load("glDepthMask");
	gload_glDisable		       = (PFNGLDISABLEPROC)gload_load("glDisable");
	gload_glEnable		       = (PFNGLENABLEPROC)gload_load("glEnable");
	gload_glFinish		       = (PFNGLFINISHPROC)gload_load("glFinish");
	gload_glFlush		       = (PFNGLFLUSHPROC)gload_load("glFlush");
	gload_glBlendFunc	       = (PFNGLBLENDFUNCPROC)gload_load("glBlendFunc");
	gload_glLogicOp		       = (PFNGLLOGICOPPROC)gload_load("glLogicOp");
	gload_glStencilFunc	       = (PFNGLSTENCILFUNCPROC)gload_load("glStencilFunc");
	gload_glStencilOp	       = (PFNGLSTENCILOPPROC)gload_load("glStencilOp");
	gload_glDepthFunc	       = (PFNGLDEPTHFUNCPROC)gload_load("glDepthFunc");
	gload_glPixelStoref	       = (PFNGLPIXELSTOREFPROC)gload_load("glPixelStoref");
	gload_glPixelStorei	       = (PFNGLPIXELSTOREIPROC)gload_load("glPixelStorei");
	gload_glReadBuffer	       = (PFNGLREADBUFFERPROC)gload_load("glReadBuffer");
	gload_glReadPixels	       = (PFNGLREADPIXELSPROC)gload_load("glReadPixels");
	gload_glGetBooleanv	       = (PFNGLGETBOOLEANVPROC)gload_load("glGetBooleanv");
	gload_glGetDoublev	       = (PFNGLGETDOUBLEVPROC)gload_load("glGetDoublev");
	gload_glGetError	       = (PFNGLGETERRORPROC)gload_load("glGetError");
	gload_glGetFloatv	       = (PFNGLGETFLOATVPROC)gload_load("glGetFloatv");
	gload_glGetIntegerv	       = (PFNGLGETINTEGERVPROC)gload_load("glGetIntegerv");
	gload_glGetString	       = (PFNGLGETSTRINGPROC)gload_load("glGetString");
	gload_glGetTexImage	       = (PFNGLGETTEXIMAGEPROC)gload_load("glGetTexImage");
	gload_glGetTexParameterfv      = (PFNGLGETTEXPARAMETERFVPROC)gload_load("glGetTexParameterfv");
	gload_glGetTexParameteriv      = (PFNGLGETTEXPARAMETERIVPROC)gload_load("glGetTexParameteriv");
	gload_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC)gload_load("glGetTexLevelParameterfv");
	gload_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC)gload_load("glGetTexLevelParameteriv");
	gload_glIsEnabled	       = (PFNGLISENABLEDPROC)gload_load("glIsEnabled");
	gload_glDepthRange	       = (PFNGLDEPTHRANGEPROC)gload_load("glDepthRange");
	gload_glViewport	       = (PFNGLVIEWPORTPROC)gload_load("glViewport");
	gload_glNewList		       = (PFNGLNEWLISTPROC)gload_load("glNewList");
	gload_glEndList		       = (PFNGLENDLISTPROC)gload_load("glEndList");
	gload_glCallList	       = (PFNGLCALLLISTPROC)gload_load("glCallList");
	gload_glCallLists	       = (PFNGLCALLLISTSPROC)gload_load("glCallLists");
	gload_glDeleteLists	       = (PFNGLDELETELISTSPROC)gload_load("glDeleteLists");
	gload_glGenLists	       = (PFNGLGENLISTSPROC)gload_load("glGenLists");
	gload_glListBase	       = (PFNGLLISTBASEPROC)gload_load("glListBase");
	gload_glBegin		       = (PFNGLBEGINPROC)gload_load("glBegin");
	gload_glBitmap		       = (PFNGLBITMAPPROC)gload_load("glBitmap");
	gload_glColor3b		       = (PFNGLCOLOR3BPROC)gload_load("glColor3b");
	gload_glColor3bv	       = (PFNGLCOLOR3BVPROC)gload_load("glColor3bv");
	gload_glColor3d		       = (PFNGLCOLOR3DPROC)gload_load("glColor3d");
	gload_glColor3dv	       = (PFNGLCOLOR3DVPROC)gload_load("glColor3dv");
	gload_glColor3f		       = (PFNGLCOLOR3FPROC)gload_load("glColor3f");
	gload_glColor3fv	       = (PFNGLCOLOR3FVPROC)gload_load("glColor3fv");
	gload_glColor3i		       = (PFNGLCOLOR3IPROC)gload_load("glColor3i");
	gload_glColor3iv	       = (PFNGLCOLOR3IVPROC)gload_load("glColor3iv");
	gload_glColor3s		       = (PFNGLCOLOR3SPROC)gload_load("glColor3s");
	gload_glColor3sv	       = (PFNGLCOLOR3SVPROC)gload_load("glColor3sv");
	gload_glColor3ub	       = (PFNGLCOLOR3UBPROC)gload_load("glColor3ub");
	gload_glColor3ubv	       = (PFNGLCOLOR3UBVPROC)gload_load("glColor3ubv");
	gload_glColor3ui	       = (PFNGLCOLOR3UIPROC)gload_load("glColor3ui");
	gload_glColor3uiv	       = (PFNGLCOLOR3UIVPROC)gload_load("glColor3uiv");
	gload_glColor3us	       = (PFNGLCOLOR3USPROC)gload_load("glColor3us");
	gload_glColor3usv	       = (PFNGLCOLOR3USVPROC)gload_load("glColor3usv");
	gload_glColor4b		       = (PFNGLCOLOR4BPROC)gload_load("glColor4b");
	gload_glColor4bv	       = (PFNGLCOLOR4BVPROC)gload_load("glColor4bv");
	gload_glColor4d		       = (PFNGLCOLOR4DPROC)gload_load("glColor4d");
	gload_glColor4dv	       = (PFNGLCOLOR4DVPROC)gload_load("glColor4dv");
	gload_glColor4f		       = (PFNGLCOLOR4FPROC)gload_load("glColor4f");
	gload_glColor4fv	       = (PFNGLCOLOR4FVPROC)gload_load("glColor4fv");
	gload_glColor4i		       = (PFNGLCOLOR4IPROC)gload_load("glColor4i");
	gload_glColor4iv	       = (PFNGLCOLOR4IVPROC)gload_load("glColor4iv");
	gload_glColor4s		       = (PFNGLCOLOR4SPROC)gload_load("glColor4s");
	gload_glColor4sv	       = (PFNGLCOLOR4SVPROC)gload_load("glColor4sv");
	gload_glColor4ub	       = (PFNGLCOLOR4UBPROC)gload_load("glColor4ub");
	gload_glColor4ubv	       = (PFNGLCOLOR4UBVPROC)gload_load("glColor4ubv");
	gload_glColor4ui	       = (PFNGLCOLOR4UIPROC)gload_load("glColor4ui");
	gload_glColor4uiv	       = (PFNGLCOLOR4UIVPROC)gload_load("glColor4uiv");
	gload_glColor4us	       = (PFNGLCOLOR4USPROC)gload_load("glColor4us");
	gload_glColor4usv	       = (PFNGLCOLOR4USVPROC)gload_load("glColor4usv");
	gload_glEdgeFlag	       = (PFNGLEDGEFLAGPROC)gload_load("glEdgeFlag");
	gload_glEdgeFlagv	       = (PFNGLEDGEFLAGVPROC)gload_load("glEdgeFlagv");
	gload_glEnd		       = (PFNGLENDPROC)gload_load("glEnd");
	gload_glIndexd		       = (PFNGLINDEXDPROC)gload_load("glIndexd");
	gload_glIndexdv		       = (PFNGLINDEXDVPROC)gload_load("glIndexdv");
	gload_glIndexf		       = (PFNGLINDEXFPROC)gload_load("glIndexf");
	gload_glIndexfv		       = (PFNGLINDEXFVPROC)gload_load("glIndexfv");
	gload_glIndexi		       = (PFNGLINDEXIPROC)gload_load("glIndexi");
	gload_glIndexiv		       = (PFNGLINDEXIVPROC)gload_load("glIndexiv");
	gload_glIndexs		       = (PFNGLINDEXSPROC)gload_load("glIndexs");
	gload_glIndexsv		       = (PFNGLINDEXSVPROC)gload_load("glIndexsv");
	gload_glNormal3b	       = (PFNGLNORMAL3BPROC)gload_load("glNormal3b");
	gload_glNormal3bv	       = (PFNGLNORMAL3BVPROC)gload_load("glNormal3bv");
	gload_glNormal3d	       = (PFNGLNORMAL3DPROC)gload_load("glNormal3d");
	gload_glNormal3dv	       = (PFNGLNORMAL3DVPROC)gload_load("glNormal3dv");
	gload_glNormal3f	       = (PFNGLNORMAL3FPROC)gload_load("glNormal3f");
	gload_glNormal3fv	       = (PFNGLNORMAL3FVPROC)gload_load("glNormal3fv");
	gload_glNormal3i	       = (PFNGLNORMAL3IPROC)gload_load("glNormal3i");
	gload_glNormal3iv	       = (PFNGLNORMAL3IVPROC)gload_load("glNormal3iv");
	gload_glNormal3s	       = (PFNGLNORMAL3SPROC)gload_load("glNormal3s");
	gload_glNormal3sv	       = (PFNGLNORMAL3SVPROC)gload_load("glNormal3sv");
	gload_glRasterPos2d	       = (PFNGLRASTERPOS2DPROC)gload_load("glRasterPos2d");
	gload_glRasterPos2dv	       = (PFNGLRASTERPOS2DVPROC)gload_load("glRasterPos2dv");
	gload_glRasterPos2f	       = (PFNGLRASTERPOS2FPROC)gload_load("glRasterPos2f");
	gload_glRasterPos2fv	       = (PFNGLRASTERPOS2FVPROC)gload_load("glRasterPos2fv");
	gload_glRasterPos2i	       = (PFNGLRASTERPOS2IPROC)gload_load("glRasterPos2i");
	gload_glRasterPos2iv	       = (PFNGLRASTERPOS2IVPROC)gload_load("glRasterPos2iv");
	gload_glRasterPos2s	       = (PFNGLRASTERPOS2SPROC)gload_load("glRasterPos2s");
	gload_glRasterPos2sv	       = (PFNGLRASTERPOS2SVPROC)gload_load("glRasterPos2sv");
	gload_glRasterPos3d	       = (PFNGLRASTERPOS3DPROC)gload_load("glRasterPos3d");
	gload_glRasterPos3dv	       = (PFNGLRASTERPOS3DVPROC)gload_load("glRasterPos3dv");
	gload_glRasterPos3f	       = (PFNGLRASTERPOS3FPROC)gload_load("glRasterPos3f");
	gload_glRasterPos3fv	       = (PFNGLRASTERPOS3FVPROC)gload_load("glRasterPos3fv");
	gload_glRasterPos3i	       = (PFNGLRASTERPOS3IPROC)gload_load("glRasterPos3i");
	gload_glRasterPos3iv	       = (PFNGLRASTERPOS3IVPROC)gload_load("glRasterPos3iv");
	gload_glRasterPos3s	       = (PFNGLRASTERPOS3SPROC)gload_load("glRasterPos3s");
	gload_glRasterPos3sv	       = (PFNGLRASTERPOS3SVPROC)gload_load("glRasterPos3sv");
	gload_glRasterPos4d	       = (PFNGLRASTERPOS4DPROC)gload_load("glRasterPos4d");
	gload_glRasterPos4dv	       = (PFNGLRASTERPOS4DVPROC)gload_load("glRasterPos4dv");
	gload_glRasterPos4f	       = (PFNGLRASTERPOS4FPROC)gload_load("glRasterPos4f");
	gload_glRasterPos4fv	       = (PFNGLRASTERPOS4FVPROC)gload_load("glRasterPos4fv");
	gload_glRasterPos4i	       = (PFNGLRASTERPOS4IPROC)gload_load("glRasterPos4i");
	gload_glRasterPos4iv	       = (PFNGLRASTERPOS4IVPROC)gload_load("glRasterPos4iv");
	gload_glRasterPos4s	       = (PFNGLRASTERPOS4SPROC)gload_load("glRasterPos4s");
	gload_glRasterPos4sv	       = (PFNGLRASTERPOS4SVPROC)gload_load("glRasterPos4sv");
	gload_glRectd		       = (PFNGLRECTDPROC)gload_load("glRectd");
	gload_glRectdv		       = (PFNGLRECTDVPROC)gload_load("glRectdv");
	gload_glRectf		       = (PFNGLRECTFPROC)gload_load("glRectf");
	gload_glRectfv		       = (PFNGLRECTFVPROC)gload_load("glRectfv");
	gload_glRecti		       = (PFNGLRECTIPROC)gload_load("glRecti");
	gload_glRectiv		       = (PFNGLRECTIVPROC)gload_load("glRectiv");
	gload_glRects		       = (PFNGLRECTSPROC)gload_load("glRects");
	gload_glRectsv		       = (PFNGLRECTSVPROC)gload_load("glRectsv");
	gload_glTexCoord1d	       = (PFNGLTEXCOORD1DPROC)gload_load("glTexCoord1d");
	gload_glTexCoord1dv	       = (PFNGLTEXCOORD1DVPROC)gload_load("glTexCoord1dv");
	gload_glTexCoord1f	       = (PFNGLTEXCOORD1FPROC)gload_load("glTexCoord1f");
	gload_glTexCoord1fv	       = (PFNGLTEXCOORD1FVPROC)gload_load("glTexCoord1fv");
	gload_glTexCoord1i	       = (PFNGLTEXCOORD1IPROC)gload_load("glTexCoord1i");
	gload_glTexCoord1iv	       = (PFNGLTEXCOORD1IVPROC)gload_load("glTexCoord1iv");
	gload_glTexCoord1s	       = (PFNGLTEXCOORD1SPROC)gload_load("glTexCoord1s");
	gload_glTexCoord1sv	       = (PFNGLTEXCOORD1SVPROC)gload_load("glTexCoord1sv");
	gload_glTexCoord2d	       = (PFNGLTEXCOORD2DPROC)gload_load("glTexCoord2d");
	gload_glTexCoord2dv	       = (PFNGLTEXCOORD2DVPROC)gload_load("glTexCoord2dv");
	gload_glTexCoord2f	       = (PFNGLTEXCOORD2FPROC)gload_load("glTexCoord2f");
	gload_glTexCoord2fv	       = (PFNGLTEXCOORD2FVPROC)gload_load("glTexCoord2fv");
	gload_glTexCoord2i	       = (PFNGLTEXCOORD2IPROC)gload_load("glTexCoord2i");
	gload_glTexCoord2iv	       = (PFNGLTEXCOORD2IVPROC)gload_load("glTexCoord2iv");
	gload_glTexCoord2s	       = (PFNGLTEXCOORD2SPROC)gload_load("glTexCoord2s");
	gload_glTexCoord2sv	       = (PFNGLTEXCOORD2SVPROC)gload_load("glTexCoord2sv");
	gload_glTexCoord3d	       = (PFNGLTEXCOORD3DPROC)gload_load("glTexCoord3d");
	gload_glTexCoord3dv	       = (PFNGLTEXCOORD3DVPROC)gload_load("glTexCoord3dv");
	gload_glTexCoord3f	       = (PFNGLTEXCOORD3FPROC)gload_load("glTexCoord3f");
	gload_glTexCoord3fv	       = (PFNGLTEXCOORD3FVPROC)gload_load("glTexCoord3fv");
	gload_glTexCoord3i	       = (PFNGLTEXCOORD3IPROC)gload_load("glTexCoord3i");
	gload_glTexCoord3iv	       = (PFNGLTEXCOORD3IVPROC)gload_load("glTexCoord3iv");
	gload_glTexCoord3s	       = (PFNGLTEXCOORD3SPROC)gload_load("glTexCoord3s");
	gload_glTexCoord3sv	       = (PFNGLTEXCOORD3SVPROC)gload_load("glTexCoord3sv");
	gload_glTexCoord4d	       = (PFNGLTEXCOORD4DPROC)gload_load("glTexCoord4d");
	gload_glTexCoord4dv	       = (PFNGLTEXCOORD4DVPROC)gload_load("glTexCoord4dv");
	gload_glTexCoord4f	       = (PFNGLTEXCOORD4FPROC)gload_load("glTexCoord4f");
	gload_glTexCoord4fv	       = (PFNGLTEXCOORD4FVPROC)gload_load("glTexCoord4fv");
	gload_glTexCoord4i	       = (PFNGLTEXCOORD4IPROC)gload_load("glTexCoord4i");
	gload_glTexCoord4iv	       = (PFNGLTEXCOORD4IVPROC)gload_load("glTexCoord4iv");
	gload_glTexCoord4s	       = (PFNGLTEXCOORD4SPROC)gload_load("glTexCoord4s");
	gload_glTexCoord4sv	       = (PFNGLTEXCOORD4SVPROC)gload_load("glTexCoord4sv");
	gload_glVertex2d	       = (PFNGLVERTEX2DPROC)gload_load("glVertex2d");
	gload_glVertex2dv	       = (PFNGLVERTEX2DVPROC)gload_load("glVertex2dv");
	gload_glVertex2f	       = (PFNGLVERTEX2FPROC)gload_load("glVertex2f");
	gload_glVertex2fv	       = (PFNGLVERTEX2FVPROC)gload_load("glVertex2fv");
	gload_glVertex2i	       = (PFNGLVERTEX2IPROC)gload_load("glVertex2i");
	gload_glVertex2iv	       = (PFNGLVERTEX2IVPROC)gload_load("glVertex2iv");
	gload_glVertex2s	       = (PFNGLVERTEX2SPROC)gload_load("glVertex2s");
	gload_glVertex2sv	       = (PFNGLVERTEX2SVPROC)gload_load("glVertex2sv");
	gload_glVertex3d	       = (PFNGLVERTEX3DPROC)gload_load("glVertex3d");
	gload_glVertex3dv	       = (PFNGLVERTEX3DVPROC)gload_load("glVertex3dv");
	gload_glVertex3f	       = (PFNGLVERTEX3FPROC)gload_load("glVertex3f");
	gload_glVertex3fv	       = (PFNGLVERTEX3FVPROC)gload_load("glVertex3fv");
	gload_glVertex3i	       = (PFNGLVERTEX3IPROC)gload_load("glVertex3i");
	gload_glVertex3iv	       = (PFNGLVERTEX3IVPROC)gload_load("glVertex3iv");
	gload_glVertex3s	       = (PFNGLVERTEX3SPROC)gload_load("glVertex3s");
	gload_glVertex3sv	       = (PFNGLVERTEX3SVPROC)gload_load("glVertex3sv");
	gload_glVertex4d	       = (PFNGLVERTEX4DPROC)gload_load("glVertex4d");
	gload_glVertex4dv	       = (PFNGLVERTEX4DVPROC)gload_load("glVertex4dv");
	gload_glVertex4f	       = (PFNGLVERTEX4FPROC)gload_load("glVertex4f");
	gload_glVertex4fv	       = (PFNGLVERTEX4FVPROC)gload_load("glVertex4fv");
	gload_glVertex4i	       = (PFNGLVERTEX4IPROC)gload_load("glVertex4i");
	gload_glVertex4iv	       = (PFNGLVERTEX4IVPROC)gload_load("glVertex4iv");
	gload_glVertex4s	       = (PFNGLVERTEX4SPROC)gload_load("glVertex4s");
	gload_glVertex4sv	       = (PFNGLVERTEX4SVPROC)gload_load("glVertex4sv");
	gload_glClipPlane	       = (PFNGLCLIPPLANEPROC)gload_load("glClipPlane");
	gload_glColorMaterial	       = (PFNGLCOLORMATERIALPROC)gload_load("glColorMaterial");
	gload_glFogf		       = (PFNGLFOGFPROC)gload_load("glFogf");
	gload_glFogfv		       = (PFNGLFOGFVPROC)gload_load("glFogfv");
	gload_glFogi		       = (PFNGLFOGIPROC)gload_load("glFogi");
	gload_glFogiv		       = (PFNGLFOGIVPROC)gload_load("glFogiv");
	gload_glLightf		       = (PFNGLLIGHTFPROC)gload_load("glLightf");
	gload_glLightfv		       = (PFNGLLIGHTFVPROC)gload_load("glLightfv");
	gload_glLighti		       = (PFNGLLIGHTIPROC)gload_load("glLighti");
	gload_glLightiv		       = (PFNGLLIGHTIVPROC)gload_load("glLightiv");
	gload_glLightModelf	       = (PFNGLLIGHTMODELFPROC)gload_load("glLightModelf");
	gload_glLightModelfv	       = (PFNGLLIGHTMODELFVPROC)gload_load("glLightModelfv");
	gload_glLightModeli	       = (PFNGLLIGHTMODELIPROC)gload_load("glLightModeli");
	gload_glLightModeliv	       = (PFNGLLIGHTMODELIVPROC)gload_load("glLightModeliv");
	gload_glLineStipple	       = (PFNGLLINESTIPPLEPROC)gload_load("glLineStipple");
	gload_glMaterialf	       = (PFNGLMATERIALFPROC)gload_load("glMaterialf");
	gload_glMaterialfv	       = (PFNGLMATERIALFVPROC)gload_load("glMaterialfv");
	gload_glMateriali	       = (PFNGLMATERIALIPROC)gload_load("glMateriali");
	gload_glMaterialiv	       = (PFNGLMATERIALIVPROC)gload_load("glMaterialiv");
	gload_glPolygonStipple	       = (PFNGLPOLYGONSTIPPLEPROC)gload_load("glPolygonStipple");
	gload_glShadeModel	       = (PFNGLSHADEMODELPROC)gload_load("glShadeModel");
	gload_glTexEnvf		       = (PFNGLTEXENVFPROC)gload_load("glTexEnvf");
	gload_glTexEnvfv	       = (PFNGLTEXENVFVPROC)gload_load("glTexEnvfv");
	gload_glTexEnvi		       = (PFNGLTEXENVIPROC)gload_load("glTexEnvi");
	gload_glTexEnviv	       = (PFNGLTEXENVIVPROC)gload_load("glTexEnviv");
	gload_glTexGend		       = (PFNGLTEXGENDPROC)gload_load("glTexGend");
	gload_glTexGendv	       = (PFNGLTEXGENDVPROC)gload_load("glTexGendv");
	gload_glTexGenf		       = (PFNGLTEXGENFPROC)gload_load("glTexGenf");
	gload_glTexGenfv	       = (PFNGLTEXGENFVPROC)gload_load("glTexGenfv");
	gload_glTexGeni		       = (PFNGLTEXGENIPROC)gload_load("glTexGeni");
	gload_glTexGeniv	       = (PFNGLTEXGENIVPROC)gload_load("glTexGeniv");
	gload_glFeedbackBuffer	       = (PFNGLFEEDBACKBUFFERPROC)gload_load("glFeedbackBuffer");
	gload_glSelectBuffer	       = (PFNGLSELECTBUFFERPROC)gload_load("glSelectBuffer");
	gload_glRenderMode	       = (PFNGLRENDERMODEPROC)gload_load("glRenderMode");
	gload_glInitNames	       = (PFNGLINITNAMESPROC)gload_load("glInitNames");
	gload_glLoadName	       = (PFNGLLOADNAMEPROC)gload_load("glLoadName");
	gload_glPassThrough	       = (PFNGLPASSTHROUGHPROC)gload_load("glPassThrough");
	gload_glPopName		       = (PFNGLPOPNAMEPROC)gload_load("glPopName");
	gload_glPushName	       = (PFNGLPUSHNAMEPROC)gload_load("glPushName");
	gload_glClearAccum	       = (PFNGLCLEARACCUMPROC)gload_load("glClearAccum");
	gload_glClearIndex	       = (PFNGLCLEARINDEXPROC)gload_load("glClearIndex");
	gload_glIndexMask	       = (PFNGLINDEXMASKPROC)gload_load("glIndexMask");
	gload_glAccum		       = (PFNGLACCUMPROC)gload_load("glAccum");
	gload_glPopAttrib	       = (PFNGLPOPATTRIBPROC)gload_load("glPopAttrib");
	gload_glPushAttrib	       = (PFNGLPUSHATTRIBPROC)gload_load("glPushAttrib");
	gload_glMap1d		       = (PFNGLMAP1DPROC)gload_load("glMap1d");
	gload_glMap1f		       = (PFNGLMAP1FPROC)gload_load("glMap1f");
	gload_glMap2d		       = (PFNGLMAP2DPROC)gload_load("glMap2d");
	gload_glMap2f		       = (PFNGLMAP2FPROC)gload_load("glMap2f");
	gload_glMapGrid1d	       = (PFNGLMAPGRID1DPROC)gload_load("glMapGrid1d");
	gload_glMapGrid1f	       = (PFNGLMAPGRID1FPROC)gload_load("glMapGrid1f");
	gload_glMapGrid2d	       = (PFNGLMAPGRID2DPROC)gload_load("glMapGrid2d");
	gload_glMapGrid2f	       = (PFNGLMAPGRID2FPROC)gload_load("glMapGrid2f");
	gload_glEvalCoord1d	       = (PFNGLEVALCOORD1DPROC)gload_load("glEvalCoord1d");
	gload_glEvalCoord1dv	       = (PFNGLEVALCOORD1DVPROC)gload_load("glEvalCoord1dv");
	gload_glEvalCoord1f	       = (PFNGLEVALCOORD1FPROC)gload_load("glEvalCoord1f");
	gload_glEvalCoord1fv	       = (PFNGLEVALCOORD1FVPROC)gload_load("glEvalCoord1fv");
	gload_glEvalCoord2d	       = (PFNGLEVALCOORD2DPROC)gload_load("glEvalCoord2d");
	gload_glEvalCoord2dv	       = (PFNGLEVALCOORD2DVPROC)gload_load("glEvalCoord2dv");
	gload_glEvalCoord2f	       = (PFNGLEVALCOORD2FPROC)gload_load("glEvalCoord2f");
	gload_glEvalCoord2fv	       = (PFNGLEVALCOORD2FVPROC)gload_load("glEvalCoord2fv");
	gload_glEvalMesh1	       = (PFNGLEVALMESH1PROC)gload_load("glEvalMesh1");
	gload_glEvalPoint1	       = (PFNGLEVALPOINT1PROC)gload_load("glEvalPoint1");
	gload_glEvalMesh2	       = (PFNGLEVALMESH2PROC)gload_load("glEvalMesh2");
	gload_glEvalPoint2	       = (PFNGLEVALPOINT2PROC)gload_load("glEvalPoint2");
	gload_glAlphaFunc	       = (PFNGLALPHAFUNCPROC)gload_load("glAlphaFunc");
	gload_glPixelZoom	       = (PFNGLPIXELZOOMPROC)gload_load("glPixelZoom");
	gload_glPixelTransferf	       = (PFNGLPIXELTRANSFERFPROC)gload_load("glPixelTransferf");
	gload_glPixelTransferi	       = (PFNGLPIXELTRANSFERIPROC)gload_load("glPixelTransferi");
	gload_glPixelMapfv	       = (PFNGLPIXELMAPFVPROC)gload_load("glPixelMapfv");
	gload_glPixelMapuiv	       = (PFNGLPIXELMAPUIVPROC)gload_load("glPixelMapuiv");
	gload_glPixelMapusv	       = (PFNGLPIXELMAPUSVPROC)gload_load("glPixelMapusv");
	gload_glCopyPixels	       = (PFNGLCOPYPIXELSPROC)gload_load("glCopyPixels");
	gload_glDrawPixels	       = (PFNGLDRAWPIXELSPROC)gload_load("glDrawPixels");
	gload_glGetClipPlane	       = (PFNGLGETCLIPPLANEPROC)gload_load("glGetClipPlane");
	gload_glGetLightfv	       = (PFNGLGETLIGHTFVPROC)gload_load("glGetLightfv");
	gload_glGetLightiv	       = (PFNGLGETLIGHTIVPROC)gload_load("glGetLightiv");
	gload_glGetMapdv	       = (PFNGLGETMAPDVPROC)gload_load("glGetMapdv");
	gload_glGetMapfv	       = (PFNGLGETMAPFVPROC)gload_load("glGetMapfv");
	gload_glGetMapiv	       = (PFNGLGETMAPIVPROC)gload_load("glGetMapiv");
	gload_glGetMaterialfv	       = (PFNGLGETMATERIALFVPROC)gload_load("glGetMaterialfv");
	gload_glGetMaterialiv	       = (PFNGLGETMATERIALIVPROC)gload_load("glGetMaterialiv");
	gload_glGetPixelMapfv	       = (PFNGLGETPIXELMAPFVPROC)gload_load("glGetPixelMapfv");
	gload_glGetPixelMapuiv	       = (PFNGLGETPIXELMAPUIVPROC)gload_load("glGetPixelMapuiv");
	gload_glGetPixelMapusv	       = (PFNGLGETPIXELMAPUSVPROC)gload_load("glGetPixelMapusv");
	gload_glGetPolygonStipple      = (PFNGLGETPOLYGONSTIPPLEPROC)gload_load("glGetPolygonStipple");
	gload_glGetTexEnvfv	       = (PFNGLGETTEXENVFVPROC)gload_load("glGetTexEnvfv");
	gload_glGetTexEnviv	       = (PFNGLGETTEXENVIVPROC)gload_load("glGetTexEnviv");
	gload_glGetTexGendv	       = (PFNGLGETTEXGENDVPROC)gload_load("glGetTexGendv");
	gload_glGetTexGenfv	       = (PFNGLGETTEXGENFVPROC)gload_load("glGetTexGenfv");
	gload_glGetTexGeniv	       = (PFNGLGETTEXGENIVPROC)gload_load("glGetTexGeniv");
	gload_glIsList		       = (PFNGLISLISTPROC)gload_load("glIsList");
	gload_glFrustum		       = (PFNGLFRUSTUMPROC)gload_load("glFrustum");
	gload_glLoadIdentity	       = (PFNGLLOADIDENTITYPROC)gload_load("glLoadIdentity");
	gload_glLoadMatrixf	       = (PFNGLLOADMATRIXFPROC)gload_load("glLoadMatrixf");
	gload_glLoadMatrixd	       = (PFNGLLOADMATRIXDPROC)gload_load("glLoadMatrixd");
	gload_glMatrixMode	       = (PFNGLMATRIXMODEPROC)gload_load("glMatrixMode");
	gload_glMultMatrixf	       = (PFNGLMULTMATRIXFPROC)gload_load("glMultMatrixf");
	gload_glMultMatrixd	       = (PFNGLMULTMATRIXDPROC)gload_load("glMultMatrixd");
	gload_glOrtho		       = (PFNGLORTHOPROC)gload_load("glOrtho");
	gload_glPopMatrix	       = (PFNGLPOPMATRIXPROC)gload_load("glPopMatrix");
	gload_glPushMatrix	       = (PFNGLPUSHMATRIXPROC)gload_load("glPushMatrix");
	gload_glRotated		       = (PFNGLROTATEDPROC)gload_load("glRotated");
	gload_glRotatef		       = (PFNGLROTATEFPROC)gload_load("glRotatef");
	gload_glScaled		       = (PFNGLSCALEDPROC)gload_load("glScaled");
	gload_glScalef		       = (PFNGLSCALEFPROC)gload_load("glScalef");
	gload_glTranslated	       = (PFNGLTRANSLATEDPROC)gload_load("glTranslated");
	gload_glTranslatef	       = (PFNGLTRANSLATEFPROC)gload_load("glTranslatef");
	gload_glDrawArrays	       = (PFNGLDRAWARRAYSPROC)gload_load("glDrawArrays");
	gload_glDrawElements	       = (PFNGLDRAWELEMENTSPROC)gload_load("glDrawElements");
	gload_glGetPointerv	       = (PFNGLGETPOINTERVPROC)gload_load("glGetPointerv");
	gload_glPolygonOffset	       = (PFNGLPOLYGONOFFSETPROC)gload_load("glPolygonOffset");
	gload_glCopyTexImage1D	       = (PFNGLCOPYTEXIMAGE1DPROC)gload_load("glCopyTexImage1D");
	gload_glCopyTexImage2D	       = (PFNGLCOPYTEXIMAGE2DPROC)gload_load("glCopyTexImage2D");
	gload_glCopyTexSubImage1D      = (PFNGLCOPYTEXSUBIMAGE1DPROC)gload_load("glCopyTexSubImage1D");
	gload_glCopyTexSubImage2D      = (PFNGLCOPYTEXSUBIMAGE2DPROC)gload_load("glCopyTexSubImage2D");
	gload_glTexSubImage1D	       = (PFNGLTEXSUBIMAGE1DPROC)gload_load("glTexSubImage1D");
	gload_glTexSubImage2D	       = (PFNGLTEXSUBIMAGE2DPROC)gload_load("glTexSubImage2D");
	gload_glBindTexture	       = (PFNGLBINDTEXTUREPROC)gload_load("glBindTexture");
	gload_glDeleteTextures	       = (PFNGLDELETETEXTURESPROC)gload_load("glDeleteTextures");
	gload_glGenTextures	       = (PFNGLGENTEXTURESPROC)gload_load("glGenTextures");
	gload_glIsTexture	       = (PFNGLISTEXTUREPROC)gload_load("glIsTexture");
	gload_glArrayElement	       = (PFNGLARRAYELEMENTPROC)gload_load("glArrayElement");
	gload_glColorPointer	       = (PFNGLCOLORPOINTERPROC)gload_load("glColorPointer");
	gload_glDisableClientState     = (PFNGLDISABLECLIENTSTATEPROC)gload_load("glDisableClientState");
	gload_glEdgeFlagPointer	       = (PFNGLEDGEFLAGPOINTERPROC)gload_load("glEdgeFlagPointer");
	gload_glEnableClientState      = (PFNGLENABLECLIENTSTATEPROC)gload_load("glEnableClientState");
	gload_glIndexPointer	       = (PFNGLINDEXPOINTERPROC)gload_load("glIndexPointer");
	gload_glInterleavedArrays      = (PFNGLINTERLEAVEDARRAYSPROC)gload_load("glInterleavedArrays");
	gload_glNormalPointer	       = (PFNGLNORMALPOINTERPROC)gload_load("glNormalPointer");
	gload_glTexCoordPointer	       = (PFNGLTEXCOORDPOINTERPROC)gload_load("glTexCoordPointer");
	gload_glVertexPointer	       = (PFNGLVERTEXPOINTERPROC)gload_load("glVertexPointer");
	gload_glAreTexturesResident    = (PFNGLARETEXTURESRESIDENTPROC)gload_load("glAreTexturesResident");
	gload_glPrioritizeTextures     = (PFNGLPRIORITIZETEXTURESPROC)gload_load("glPrioritizeTextures");
	gload_glIndexub		       = (PFNGLINDEXUBPROC)gload_load("glIndexub");
	gload_glIndexubv	       = (PFNGLINDEXUBVPROC)gload_load("glIndexubv");
	gload_glPopClientAttrib	       = (PFNGLPOPCLIENTATTRIBPROC)gload_load("glPopClientAttrib");
	gload_glPushClientAttrib       = (PFNGLPUSHCLIENTATTRIBPROC)gload_load("glPushClientAttrib");
}
#endif

#ifdef __cplusplus
}
#endif
#endif
